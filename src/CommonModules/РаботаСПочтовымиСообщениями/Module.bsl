////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с почтовыми сообщениями".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//   Модуль "РаботаСПочтовымиСообщениями", содержит функции-интерфейсы,
// для работы с почтовыми сообщениями. Должен присутствовать в любой
// конфигурации, которая содержит почтовую подсистему.
//
//   Функции не содержат спецификации параметров - их необходимо смотреть
// в модуле, непосредственно реализующем ту или иную механику работы с
// почтовыми сообщениями (с серверами).
//

Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись,
	                               Знач ПараметрыПисьма,
	                               Знач Соединение = Неопределено) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
	   ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена неправильно.'");
	КонецЕсли;
	
	Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	ТипЗнчКому = ?(ПараметрыПисьма.Свойство("Кому"), ТипЗнч(ПараметрыПисьма.Кому), Неопределено);
	ТипЗнчКопии = ?(ПараметрыПисьма.Свойство("Копии"), ТипЗнч(ПараметрыПисьма.Копии), Неопределено);
	ТипЗнчСлепыеКопии = ?(ПараметрыПисьма.Свойство("СлепыеКопии"), ТипЗнч(ПараметрыПисьма.СлепыеКопии), Неопределено);
	
	Если ТипЗнчКому = Неопределено И ТипЗнчКопии = Неопределено И ТипЗнчСлепыеКопии = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указано ни одного получателя.'");
	КонецЕсли;
	
	Если ТипЗнчКому = Тип("Строка") Тогда
		ПараметрыПисьма.Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Кому);
	ИначеЕсли ТипЗнчКому <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Кому", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчКопии = Тип("Строка") Тогда
		ПараметрыПисьма.Копии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Копии);
	ИначеЕсли ТипЗнчКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Копии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСлепыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СлепыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СлепыеКопии);
	ИначеЕсли ТипЗнчСлепыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтвета") И ТипЗнч(ПараметрыПисьма.АдресОтвета) = Тип("Строка") Тогда
		ПараметрыПисьма.АдресОтвета = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.АдресОтвета);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		Для Каждого КлючИЗначение Из ПараметрыПисьма.Вложения Цикл
			Вложение = КлючИЗначение.Значение;
			Если РаботаСПочтовымиСообщениямиСлужебный.ПривестиВложениеДляВставкиВПисьмо(Вложение) Тогда
				ПараметрыПисьма.Вложения.Вставить(КлючИЗначение.Ключ, Вложение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РаботаСПочтовымиСообщениямиСлужебный.ОтправитьСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции

Процедура ОтправитьУведомлениеОВыходеНовойВерсииТиповогоПродукта(Продукт, ДатаРелиза, НомерВерсии) Экспорт
	
	Если НЕ Продукт.ОповещатьОВыходеНовойВерсии или Продукт.ПолучателиОповещений.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	ДоступныеУчетныеЗаписи = ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	Письмо.Дата = текущаяДата();
	Письмо.УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	Если Продукт.ТипПродукта = Перечисления.ТипыПродуктов1С.Конфигурация тогда
		Письмо.Тема = "Новая версия "+НомерВерсии+" конфигурации """+Продукт.Наименование+"""";
	иначеЕсли Продукт.ТипПродукта = Перечисления.ТипыПродуктов1С.Платформа тогда
		Письмо.Тема = "Новая версия "+НомерВерсии+" платформы """+Продукт.Наименование+"""";
	иначе
		Письмо.Тема = "Новая версия "+НомерВерсии+" """+Продукт.Наименование+"""";
	КонецЕсли;
	СписокПолучателей = "";
	Для Каждого Стр из Продукт.ПолучателиОповещений Цикл
		Если ТипЗнч(Стр.Получатель) = Тип("Строка") тогда
			СписокПолучателей = СписокПолучателей + ?(ЗначениеЗаполнено(СписокПолучателей),", ","")+Стр.Получатель;
		Иначе
			Для каждого ТекСтрока_КИ Из Стр.Получатель.КонтактнаяИнформация Цикл
				Если ТекСтрока_КИ.Тип  = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СписокПолучателей = СписокПолучателей + ?(ЗначениеЗаполнено(СписокПолучателей),", ","") + ТекСтрока_КИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Письмо.СписокПолучателейПисьма = СписокПолучателей;	
			
	Макет = ПолучитьОбщийМакет("ШаблонУведомленияОВыходеНовойВерсии");
	ТелоПисьма = Макет.ПолучитьТекст();
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"{Продукт}",Продукт.Наименование);
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"{ДатаРелиза}",Формат(ДатаРелиза,"ДЛФ=DD"));
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"{НомерВерсии}",НомерВерсии);
	Письмо.ЕстьВложения = Ложь;
	Письмо.ТекстHTML = ТелоПисьма;
	Письмо.Кодировка = "UTF-8";
	Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	Письмо.Записать(режимЗаписиДокумента.Проведение);

КонецПроцедуры

// Получить доступные учетные записи электронной почты.
//
//  Параметры:
//   ДляОтправки                    - Булево - Если установлено Истина, то будут выбирать только записи, с которых
//                                             можно отправлять почту.
//   ДляПолучения                   - Булево - Если установлено Истина, то будут выбирать только записи, по которым
//                                             можно получать почту.
//   ВключатьСистемнуюУчетнуюЗапись - Булево - включать системную учетную запись, если настроена для отправки/получения.
//
// Возвращаемое значение:
//  ДоступныеУчетныеЗаписи - ТаблицаЗначений - описание учетных записей:
//   Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись;
//   Наименование - Строка - наименование учетной записи;
//   Адрес        - Строка - адрес электронной почты.
//
Функция ДоступныеУчетныеЗаписи(Знач ДляОтправки = Неопределено,
										Знач ДляПолучения  = Неопределено,
										Знач ВключатьСистемнуюУчетнуюЗапись = Истина) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.Наименование КАК Наименование,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК Адрес,
	|	ВЫБОР
	|		КОГДА УчетныеЗаписиЭлектроннойПочты.Ссылка = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ДляОтправки = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки = &ДляОтправки
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДляПолучения = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения = &ДляПолучения
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВключатьСистемнуюУчетнуюЗапись
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УчетныеЗаписиЭлектроннойПочты.Ссылка <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)
	|		КОНЕЦ
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
	|	И ВЫБОР
	|			КОГДА УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения
	|				ТОГДА УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты <> """"
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|				ТОГДА УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты <> """"
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ДляОтправки", ДляОтправки);
	Запрос.Параметры.Вставить("ДляПолучения", ДляПолучения);
	Запрос.Параметры.Вставить("ВключатьСистемнуюУчетнуюЗапись", ВключатьСистемнуюУчетнуюЗапись);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому"     , ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Объект.СписокПолучателейПисьма));
	ПараметрыПисьма.Вставить("Тема"     , Объект.Тема);
	ПараметрыПисьма.Вставить("Тело"     , Объект.ТекстHTML);
	ПараметрыПисьма.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	
	СоотвВложения = Новый Соответствие;
	Если Объект.ЕстьВложения тогда
		СписокФайлов = ПрисоединенныеФайлыСервер.ПолучитьСписокФайлов(Объект.Задача);
		Вложения = Новый Соответствие;
		Для Каждого СтрФайл Из СписокФайлов Цикл
			ДанныеФайла = ПрисоединенныеФайлыСервер.ПолучитьДанныеФайла(СтрФайл.Значение);
			СоотвВложения.Вставить(СтрФайл.Значение.Наименование, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		КонецЦикла;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Объект.УчетнаяЗапись, ПараметрыПисьма);	
	
КонецФункции

// Функция для загрузки сообщений. Проверяет корректность заполнения учетной
// записи и вызывает функцию, реализующую механику загрузки сообщений.
// 
// Параметры к функции см. в функции ЗагрузитьСообщения.
//
Функция ЗагрузитьПочтовыеСообщения(Знач УчетнаяЗапись,
                                   Знач ПараметрыЗагрузки = Неопределено) Экспорт
	
	ИспользоватьДляПолучения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ИспользоватьДляПолучения");
	Если НЕ ИспользоватьДляПолучения Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не предназначена для получения сообщений.'");
	КонецЕсли;
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		ПараметрыЗагрузки = Новый Структура;
	КонецЕсли;
	
	Результат = РаботаСПочтовымиСообщениямиСлужебный.ЗагрузитьСообщения(УчетнаяЗапись, ПараметрыЗагрузки);
	
	Возврат Результат;
	
КонецФункции

// Получает ссылку на учетную запись по виду назначения учетной записи.
//
// Возвращаемое значение:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка
//                  на описание учетной записи.
//
Функция СистемнаяУчетнаяЗапись() Экспорт
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
КонецФункции

// Проверяет, что системная учетная запись доступна (может быть использована).
//
// Возвращаемое значение:
//  Булево.
Функция ПроверитьСистемнаяУчетнаяЗаписьДоступна() Экспорт
	
	Возврат РаботаСПочтовымиСообщениямиСлужебный.ПроверитьСистемнаяУчетнаяЗаписьДоступна();
	
КонецФункции

// Возвращает Истину, если доступна по меньшей мере одна настроенная учетная запись для отправки почты,
// либо достаточно прав на настройку учетной записи.
Функция ДоступнаОтправкаПисем() Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
	|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
	|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
	|	И УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты <> """"";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

// Проверяет, настроена ли учетная запись для отправки и/или получения почты.
//
// Параметры:
//  УчетнаяЗапись - Справочники.УчетныеЗаписиЭлектроннойПочты - проверяемая учетная запись;
//  ДляОтправки  - Булево - проверять параметры, необходимые для отправки почты;
//  ДляПолучения - Булево - проверять параметры, необходимые для получения почты.
// 
// Возвращаемое значение:
//  Булево.
Функция УчетнаяЗаписьНастроена(УчетнаяЗапись, ДляОтправки = Истина, ДляПолучения = Истина) Экспорт
	Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты,СерверВходящейПочты,СерверИсходящейПочты");
	Возврат Не (ПустаяСтрока(Параметры.АдресЭлектроннойПочты) 
		Или ДляПолучения И ПустаяСтрока(Параметры.СерверВходящейПочты)
		Или ДляОтправки И ПустаяСтрока(Параметры.СерверИсходящейПочты));
КонецФункции