Процедура ОтправкаУведомлений(ВыводитьСообщенияПользователю = Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыводитьСообщенияПользователю тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправка уведомлений начата!");
	иначе
		ЗаписьЖурналаРегистрации("Отправка уведомлений", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начата регламентная отправка уведомлений'"));
	КонецЕсли;
	
	// Отправка писем
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронноеПисьмоИсходящее.Ссылка) КАК ПредставлениеПисьма,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ВыборкаУчетныеЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчетныеЗаписи.Следующий() Цикл
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(ВыборкаУчетныеЗаписи.УчетнаяЗапись);
		
		Попытка
			Соединение = Новый ИнтернетПочта;
			Соединение.Подключиться(Профиль);
		Исключение
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время подключения к учетной записи %1 произошла ошибка
			|%2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ВыборкаУчетныеЗаписи.УчетнаяЗапись, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ВыводитьСообщенияПользователю тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			Иначе
				ЗаписьЖурналаРегистрации("Отправка уведомлений",
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         ТекстСообщенияОбОшибке);
			КонецЕсли;
			Продолжить;
			
		КонецПопытки;
		
		ВыборкаПисьма = ВыборкаУчетныеЗаписи.Выбрать();
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
			Попытка
				ИдентификаторПисьма = РаботаСПочтовымиСообщениями.ВыполнитьОтправкуПисьма(ПисьмоОбъект, Соединение);
			Исключение
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Во время отправки электронного письма %1 произошла ошибка
				|%2'"), ВыборкаПисьма.ПредставлениеПисьма, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Если ВыводитьСообщенияПользователю тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
				иначе
					ЗаписьЖурналаРегистрации("Отправка уведомлений",
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщенияОбОшибке);
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
			
			ПисьмоОбъект.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
			ПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
			ПисьмоОбъект.ДатаОтправления        = ТекущаяДатаСеанса();
			
			Попытка
				ПисьмоОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			//ПисьмоОбъект.Удалить();
			
		КонецЦикла;
		
		Соединение.Отключиться();
	
	КонецЦикла;
	
	Если ВыводитьСообщенияПользователю тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отправка уведомлений выполнена!");
	иначе
		ЗаписьЖурналаРегистрации("Отправка уведомлений", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончена регламентная отправка уведомлений'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеЗадач() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации("Получение задач", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное получение задач из электронной почты'"));
		
	УчетнаяЗаписьДляПолученияЗадач = Константы.УчетнаяЗаписьДляПолученияЗадач.Получить();
	Если ЗначениеЗаполнено(УчетнаяЗаписьДляПолученияЗадач) тогда
		РаботаСПочтовымиСообщениями.ПолучитьПисьма(УчетнаяЗаписьДляПолученияЗадач);	
	иначе
		ЗаписьЖурналаРегистрации("Получение задач", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Не указана учетная запись для получения задач"));		
	КонецЕсли;
		
		
	ЗаписьЖурналаРегистрации("Получение задач", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное получение задач из электронной почты'"));

КонецПроцедуры

Процедура ФормированиеНачисленийЗаМесяц() Экспорт
	
	ЗаписьЖурналаРегистрации("Формирование начислений", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное формирование начислений по клиентам'"));
			
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегламентныеНачисления.Клиент,
	|	СоглашенияСКлиентами.СпособОплаты,
	|	ЕСТЬNULL(СоглашенияСКлиентами.Оклад,0) КАК Оклад,
	|	ЕСТЬNULL(ДокументНачисления.Ссылка,ЗНАЧЕНИЕ(Документ.НачислениеПоКлиенту.ПустаяСсылка)) КАК ДокументНачисления
	|ИЗ
	|	РегистрСведений.РегламентныеНачисленияПоКлиентам КАК РегламентныеНачисления
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СоглашенияСКлиентами.СрезПоследних(&КонецМесяца) КАК СоглашенияСКлиентами
	|ПО 
	|	СоглашенияСКлиентами.Клиент = РегламентныеНачисления.Клиент
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.НачислениеПоКлиенту КАК ДокументНачисления	
	|ПО ДокументНачисления.Клиент = РегламентныеНачисления.Клиент и ДокументНачисления.Проведен = ИСТИНА и ДокументНачисления.Дата МЕЖДУ &НачалоМесяца и &КонецМесяца 
	|ГДЕ
	|	РегламентныеНачисления.ЧислоМесяца = &ПараметрТекущееЧисло 
	| и ЕСТЬNULL(СоглашенияСКлиентами.Оклад,0)>0 и СоглашенияСКлиентами.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплаты.Оклад)
	| и ЕСТЬNULL(ДокументНачисления.Ссылка,ЗНАЧЕНИЕ(Документ.НачислениеПоКлиенту.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.НачислениеПоКлиенту.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ПараметрТекущееЧисло",День(ТекущаяДата()));
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ТекущаяДата()));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		НачислениеОбъект = Документы.НачислениеПоКлиенту.СоздатьДокумент();
		НачислениеОбъект.Дата = ТекущаяДата();
		НачислениеОбъект.Клиент = Выборка.Клиент;
		НачислениеОбъект.Сумма = Выборка.Оклад;
		НачислениеОбъект.Комментарий = "Сформировано автоматически регламентом";
		НачислениеОбъект.Записать(режимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Формирование начислений", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное формирование начислений по клиентам'")); 
КонецПроцедуры

Процедура ПроверкаОбновлений1С(ВыводитьСообщенияПользователю = Ложь) Экспорт
	
	Если НЕ ВыводитьСообщенияПользователю тогда
		ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата процедура проверки обновлений 1С'"));
	КонецЕсли;
	
	Результат = ПодключитьсяКСерверу1С(ВыводитьСообщенияПользователю);
	
	Если Результат.СтатусВозврата = Ложь тогда
		Если НЕ ВыводитьСообщенияПользователю тогда			
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Процедура проверки обновлений 1С завершена с ошибкой'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СессияID = Результат.СессияID;
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Запрос.Заголовки.Вставить("Cookie", СессияID);
	Запрос.АдресРесурса = "/total";
	СоединениеReleases = Новый HTTPСоединение("releases.1c.ru",,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);						
	ОтветHTTP = СоединениеReleases.Получить(Запрос);
	
	СтрокаHTML = ОтветHTTP.ПолучитьТелоКакСтроку();
	Если НЕ ЗначениеЗаполнено(СтрокаHTML) тогда
		Если ВыводитьСообщенияПользователю тогда			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Процедура проверки обновлений 1С завершена с ошибкой!");			
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Процедура проверки обновлений 1С завершена с ошибкой'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(СтрокаHTML);
		
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
		
	СтрокиТаблицы = ДокументHTML.ПолучитьЭлементПоИдентификатору("actualTable").ПолучитьЭлементыПоИмени("tr");
	Группа = Справочники.ТиповыеПродукты1С.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		
		Если СтрокаТаблицы.ДочерниеУзлы.Количество() = 16 Тогда // строка
			Название = "";
			НомерВерсии = "";
			ДатаРелиза = "";
			Для Каждого Стр из СтрокаТаблицы.ДочерниеУзлы Цикл
				Если ТипЗнч(Стр) <> Тип("ЭлементЯчейкаТаблицыHTML") или Стр.ИмяЭлемента <> "td" тогда
					Продолжить;
				КонецЕсли;
				
				Если Стр.ИмяКласса = "nameColumn" тогда
					Название = СокрЛП(Стр.ТекстовоеСодержимое);
				КонецЕсли;
				
				Если Стр.ИмяКласса = "releaseDate" тогда
					ДатаРелиза = СокрЛП(Стр.ТекстовоеСодержимое);
					Если ЗначениеЗаполнено(ДатаРелиза) тогда
						// распарсим
						День = Число(Лев(ДатаРелиза,СтрНайти(ДатаРелиза,".")-1));
						ДатаРелиза = Прав(ДатаРелиза,СтрДлина(ДатаРелиза) -СтрНайти(ДатаРелиза,".")); 
						Месяц = Число(Лев(ДатаРелиза,СтрНайти(ДатаРелиза,".")-1));
						Год = Число("20"+Прав(ДатаРелиза,СтрДлина(ДатаРелиза) -СтрНайти(ДатаРелиза,"."))); 						
						ДатаРелиза = Дата(Год,Месяц,День);
					КонецЕсли;
				КонецЕсли;
				
				Если СтрНайти(Стр.ИмяКласса,"actualVersionColumn")>0 тогда
					НомерВерсии = СокрЛП(Стр.ТекстовоеСодержимое);
				КонецЕсли;				
			КонецЦикла;			
			Если НЕ ЗначениеЗаполнено(Название) тогда
				Продолжить;
			КонецЕсли;
			
			Продукт = Справочники.ТиповыеПродукты1С.НайтиПоНаименованию(Название,Истина,Группа);
			Если Продукт.Пустая() тогда
				ПродуктОбъект = Справочники.ТиповыеПродукты1С.СоздатьЭлемент();
				ПродуктОбъект.Родитель = Группа;
				ПродуктОбъект.Наименование = Название;
				ПродуктОбъект.ТипПродукта = ВернутьТипПродукта(Название,Группа);
				ПродуктОбъект.Записать();
				Продукт = ПродуктОбъект.Ссылка;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ДатаРелиза) или НЕ ЗначениеЗаполнено(НомерВерсии) тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.АктуальныеРелизыТиповыхПродуктов1С.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТиповойПродукт.Установить(Продукт);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()=0 тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ТиповойПродукт = Продукт;
				Запись.Период = ДатаРелиза;
				Запись.НомерВерсии = НомерВерсии;
				НаборЗаписей.Записать(Истина);
				РаботаСПочтовымиСообщениями.ОтправитьУведомлениеОВыходеНовойВерсииТиповогоПродукта(Запись.ТиповойПродукт,ДатаРелиза,НомерВерсии);
			иначе
				Если НаборЗаписей[0].НомерВерсии<>НомерВерсии тогда // версия изменилась
					Запись = НаборЗаписей[0];
					Запись.Период = ДатаРелиза;
					Запись.НомерВерсии = НомерВерсии;
					НаборЗаписей.Записать(Истина);                                                                              
					РаботаСПочтовымиСообщениями.ОтправитьУведомлениеОВыходеНовойВерсииТиповогоПродукта(Запись.ТиповойПродукт,ДатаРелиза,НомерВерсии);
				КонецЕсли;
			КонецЕсли;			
			
		иначеЕсли  СтрокаТаблицы.ДочерниеУзлы.Количество() = 2 Тогда // группа
			ИмяГруппы = "";
			Для Каждого Стр из СтрокаТаблицы.ДочерниеУзлы Цикл
				Если ТипЗнч(Стр) <> Тип("ЭлементЯчейкаТаблицыHTML") или Стр.ИмяЭлемента <> "td" тогда
					Продолжить;
				КонецЕсли;
				Если Стр.ИмяКласса = "groupColumn" тогда
					ИмяГруппы = СокрЛП(Стр.ТекстовоеСодержимое);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(ИмяГруппы) тогда
				Продолжить;
			КонецЕсли;
			Группа = Справочники.ТиповыеПродукты1С.НайтиПоНаименованию(ИмяГруппы,Истина);
			Если Группа.Пустая() тогда
				ГруппаОбъект = Справочники.ТиповыеПродукты1С.СоздатьГруппу();
				ГруппаОбъект.Наименование = ИмяГруппы;
				ГруппаОбъект.Записать();
				Группа = ГруппаОбъект.Ссылка;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВыводитьСообщенияПользователю тогда
		ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Завершена процедура проверки обновлений 1С'"));
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнено!");
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьТипПродукта(Название,Группа)
	Если СтрНайти(Название,"Технологическая платформа")>0 тогда
		Возврат Перечисления.ТипыПродуктов1С.Платформа;
	иначеЕсли ЗначениеЗаполнено(Группа)
	 и (СтрНайти(Группа.Наименование,"Типовые конфигурации")>0 
	 или СтрНайти(Группа.Наименование,"Отраслевые решения")>0
	 или СтрНайти(Группа.Наименование,"Конфигурации проекта")>0) тогда
		Возврат Перечисления.ТипыПродуктов1С.Конфигурация;
	иначеЕсли СтрНайти(Название,"Конвертация данных")>0 тогда
		Возврат Перечисления.ТипыПродуктов1С.Конфигурация;
	иначе
		Возврат Перечисления.ТипыПродуктов1С.Прочее;
	КонецЕсли;
КонецФункции

Функция ПодключитьсяКСерверу1С(ВыводитьСообщенияПользователю) Экспорт
	Логин1С = Константы.Логин1С.Получить();
	Пароль1С = Константы.Пароль1С.Получить();
	
	Соединение2 = Новый HTTPСоединение("releases.1c.ru",,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	
	Если Не ЗначениеЗаполнено(Логин1С) тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан логин для подключения к серверу 1С");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не указан логин для подключения к серверу 1С'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пароль1С) тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан пароль для подключения к серверу 1С");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не указан пароль для подключения к серверу 1С'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;
	
	// (1)
	СоединениеReleases = Новый HTTPСоединение("releases.1c.ru",,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Connection","keep-alive");
	HTTPЗапрос = Новый HTTPЗапрос("/total",Соответствие);	
	ОтветReleases = СоединениеReleases.Получить(HTTPЗапрос);
	Если ОтветReleases.КодСостояния<>302 тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации на сайте 1С (1)");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Ошибка при авторизации на сайте 1С (1)'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;	
	SessionID_Release = ПолучитьSessionID(ОтветReleases);
		
	
	// (2)	
	HTTPЗапрос.АдресРесурса = СтрЗаменить(ОтветReleases.Заголовки.Получить("Location"), "https://login.1c.ru", "");
	СоединениеLogin = Новый HTTPСоединение("login.1c.ru",,,,Новый ИнтернетПрокси,,Новый ЗащищенноеСоединениеOpenSSL);
	ОтветLogin = СоединениеLogin.Получить(HTTPЗапрос);
	Если ОтветLogin.КодСостояния<>200 тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации на сайте 1С (2)");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Ошибка при авторизации на сайте 1С (2)'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;	
	КодПриглашения	= СформироватьКодПриглашения(ОтветLogin.ПолучитьТелоКакСтроку(),Логин1С,Пароль1С);
	
	// (3)
	SessionID_Login = ПолучитьSessionID(ОтветLogin);			
	HTTPЗапрос.Заголовки.Вставить("Cookie", SessionID_Login);
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(КодПриглашения);
	ОтветLogin = СоединениеLogin.ОтправитьДляОбработки(HTTPЗапрос);
	Если ОтветLogin.КодСостояния<>302 тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации на сайте 1С (3)");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Ошибка при авторизации на сайте 1С (3)'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;
		
	//Запрос 4
	HTTPЗапрос.АдресРесурса = СтрЗаменить(ОтветLogin.Заголовки.Получить("Location"), "https://releases.1c.ru", "");
	HTTPЗапрос.Заголовки.Вставить("Cookie", SessionID_Release);
	HTTPЗапрос.Заголовки.Удалить("Content-Type");
	ОтветReleases = СоединениеReleases.Получить(HTTPЗапрос);
	Если ОтветLogin.КодСостояния<>302 тогда
		Если ВыводитьСообщенияПользователю тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации на сайте 1С (4)");
		иначе
			ЗаписьЖурналаРегистрации("Проверка обновлений 1С", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Ошибка при авторизации на сайте 1С (4)'"));
		КонецЕсли;
		Возврат Новый Структура("СтатусВозврата",Ложь);
	КонецЕсли;			
	Возврат Новый Структура("СтатусВозврата,СессияID",Истина,SessionID_Release);
	
КонецФункции

Функция ПолучитьSessionID(ОтветHTTP)
	SessionID = ОтветHTTP.Заголовки.Получить("Set-Cookie");
	SessionID = Прав(SessionID,СтрДлина(SessionID)-Найти(SessionID, "SESSION")+1);
	SessionID = Лев(SessionID, Найти(SessionID, ";") - 1);
	Возврат SessionID;
КонецФункции

Функция СформироватьКодПриглашения(ТелоОтветаHTTP,Логин1С,Пароль1С)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТелоОтветаHTTP);
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	loginForm = ДокументHTML.ПолучитьЭлементПоИдентификатору("loginForm");
	
	КодПриглашения = "inviteCode=&lt=" + loginForm.Элементы[1].Значение 
				+ "&execution=" + loginForm.Элементы[2].Значение 
				+ "&_eventId=" + loginForm.Элементы[3].Значение
	 			+ "&username=" + Логин1С 
				+ "&password=" + Пароль1С;
				
	Возврат КодПриглашения;

КонецФункции

Процедура СозданиеЗадачПоШаблону() Экспорт
	
	ЗаписьЖурналаРегистрации("Создание регламентных задач", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато создание регламентных задач'"));
			
	запрос = новый запрос(
		"ВЫБРАТЬ
		|	РегламентныеЗадачи.Шаблон,
		|	РегламентныеЗадачи.Расписание,
		|	РегламентныеЗадачи.ДатаПоследнегоЗапуска,		
		|   РегламентныеЗадачи.Наименование
		|ИЗ
		|	РегистрСведений.РегламентныеЗадачи КАК РегламентныеЗадачи		
		|ГДЕ
		|	РегламентныеЗадачи.Использование = Истина");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗадачи = Ложь;
	Пока Выборка.Следующий() Цикл		
		ТекущаяДата = ТекущаяДата();
		Расписание = Выборка.Расписание.Получить();
		Если Расписание <> Неопределено И Расписание.ТребуетсяВыполнение(ТекущаяДата, ?(ЗначениеЗаполнено(Выборка.ДатаПоследнегоЗапуска), Выборка.ДатаПоследнегоЗапуска, Неопределено)) Тогда
			ЕстьЗадачи = Истина;
			Задача = Документы.Задача.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(Задача,Выборка.Шаблон);
			Задача.Номер = "";
			Задача.Дата = ТекущаяДата;
			Задача.ДатаВыполнения = Дата(1,1,1);
			Задача.ДатаВыполненияПлан = Дата(1,1,1);
			Задача.ТипЗадачи = Перечисления.ТипыЗадач.СформированаПоРасписанию;
			Задача.СостояниеЗадачи = Перечисления.СостоянияЗадач.Создано;
			Задача.Записать(РежимЗаписиДокумента.Проведение);
						
			НаборЗаписей = РегистрыСведений.РегламентныеЗадачи.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Шаблон.Установить(Выборка.Шаблон);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].ДатаПоследнегоЗапуска = ТекущаяДата;							
			НаборЗаписей.Записать(истина);
		КонецЕсли;		
	КонецЦикла;
	
	Если ЕстьЗадачи тогда
		РабочийСтолВызовСервера.ЗапуститьОбновлениеРабочегоСтолаНаКлиентах();
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Создание регламентных задач", 
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено создание регламентных задач'"));
	
КонецПроцедуры

Функция ЕстьРегламентноеНачисление(Клиент) Экспорт
	Рег = РегистрыСведений.РегламентныеНачисленияПоКлиентам.Получить(Новый Структура("Клиент",Клиент));	
	Возврат НЕ Рег.ЧислоМесяца=0;
КонецФункции

Процедура ЗапланироватьНачисление(Клиент,ЧислоМесяца) Экспорт
	Рег = РегистрыСведений.РегламентныеНачисленияПоКлиентам.СоздатьМенеджерЗаписи();
	рег.Клиент = Клиент;
	Рег.ЧислоМесяца = ЧислоМесяца;
	Рег.Записать(Истина);
КонецПроцедуры

Процедура ПроверитьАктуальностьКонфигурацийКлиентов(ТиповойПродукт,АктуальныйНомерВерсии,ДатаВыхода) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТиповойПродукт",ТиповойПродукт);
	Запрос.УстановитьПараметр("АктуальныйНомерВерсии",АктуальныйНомерВерсии);
	Запрос.УстановитьПараметр("ДатаВыхода",ДатаВыхода);	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникКонфигурации.Ссылка,
	|	ТекущиеРелизыКонфигурацийКлиентов.НомерВерсии,
	|	ТекущиеРелизыКонфигурацийКлиентов.Период КАК ДатаУстановки
	|ИЗ
	|	Справочник.КонфигурацииКлиентов КАК СправочникКонфигурации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеРелизыКонфигурацийКлиентов.СрезПоследних(, ) КАК ТекущиеРелизыКонфигурацийКлиентов
	|		ПО СправочникКонфигурации.Ссылка = ТекущиеРелизыКонфигурацийКлиентов.Конфигурация
	|ГДЕ
	|	СправочникКонфигурации.ТиповаяКонфигурация = &ТиповойПродукт
	|	И ТекущиеРелизыКонфигурацийКлиентов.НомерВерсии <> &АктуальныйНомерВерсии";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл		
		// создадим задачу		
		ЗадачаОбъект = Документы.Задача.СоздатьДокумент();
		ЗадачаОбъект.Дата = ТекущаяДата();
		ЗадачаОбъект.ТипЗадачи = Перечисления.ТипыЗадач.ВнешнийИсточник;
		ЗадачаОбъект.СостояниеЗадачи = Перечисления.СостоянияЗадач.Создано;	
		ЗадачаОбъект.Наименование = "Обновить "+Выборка.Ссылка+" до релиза "+АктуальныйНомерВерсии;		
		ЗадачаОбъект.Клиент = Выборка.Ссылка.Владелец;	
		ЗадачаОбъект.ВидЗадачи = Справочники.ВидыЗадач.ОбновлениеТиповыхПродуктов;
		ЗадачаОбъект.КонфигурацияКлиента = Выборка.Ссылка;
		ЗадачаОбъект.НоваяВерсияКонфигурацииКлиента = АктуальныйНомерВерсии;
		ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЦикла;	
	РабочийСтолВызовСервера.ЗапуститьОбновлениеРабочегоСтолаНаКлиентах();
КонецПроцедуры
