#Область ОбработчикиДокументов

// Используется в обработке "ПриСозданииНаСервере" любого документа.
//
// ДокументОбъект. Тип -ДокументОбъект. Получить через РеквизитФормыВЗначение("Объект").
// Объект. Тип -ДанныеФормыСтурктура. Для установки значений.
//
// ................................................................................
Процедура Документ_ПриСозданииНаСервере(ДокументОбъект, Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаВзаиморасчетов", МетаданныеОбъекта) Тогда
			Объект.ВалютаВзаиморасчетов = Константы.ВалютаУчета.Получить();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеОбъекта) Тогда
			Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Исполнитель", МетаданныеОбъекта) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Исполнители.Ссылка
			|ИЗ
			|	Справочник.Исполнители КАК Исполнители
			|ГДЕ
			|	Исполнители.ФизическоеЛицо = &ФизическоеЛицо";
			Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.ТекущееФизЛицо);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Объект.Исполнитель = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДляРаботыССуммами

// Получает сумму проекта.
//
// Параметры:
//  Проект  - СправочникСсылка.Проекты
// ................................................................................
Функция ПолучитьСуммуПроекта(ДатаДокумента, Проект, ВалютаВзаиморасчетов = Неопределено, СуммаВзаиморасчетов = Неопределено) Экспорт
	
	СуммаПроекта = 0;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьПроектовСрезПоследних.СуммаПроектаВВалютеУчета
	|ИЗ
	|	РегистрСведений.СтоимостьПроектов.СрезПоследних(&Дата, Проект = &Проект) КАК СтоимостьПроектовСрезПоследних";
	Запрос.УстановитьПараметр("Дата"  , ДатаДокумента);
	Запрос.УстановитьПараметр("Проект", Проект);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаПроекта = Выборка.СуммаПроектаВВалютеУчета;
	КонецЕсли;
	Если СуммаПроекта = 0 И НЕ (ВалютаВзаиморасчетов = Неопределено И СуммаВзаиморасчетов = Неопределено) Тогда
		СуммаПроекта = ПолучитьСуммуОплатыВВалютеУчета(ДатаДокумента, ВалютаВзаиморасчетов, СуммаВзаиморасчетов, Проект);
	КонецЕсли;
	Возврат СуммаПроекта;
	
КонецФункции

// Получает сумму оплаты в валюте учета.
//
// Параметры:
// Пар1 - Тип - Описание
// Возвращаемое значение:
// Знач1 - Тип - Описание
//
// ................................................................................
Функция ПолучитьСуммуОплатыВВалютеУчета(ДатаДокумента, ВалютаВзаиморасчетов, СуммаВзаиморасчетов, Проект) Экспорт
	
	СуммаВВалютеУчета = 0;
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	Если ВалютаВзаиморасчетов = ВалютаУчета Тогда
		СуммаВВалютеУчета = СуммаВзаиморасчетов;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Период,
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность,
		|	РАЗНОСТЬДАТ(&Дата, КурсыВалютСрезПоследних.Период, ДЕНЬ) КАК РазницаДней
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		Запрос.УстановитьПараметр("Дата"  , ДатаДокумента);
		Запрос.УстановитьПараметр("Валюта", ВалютаВзаиморасчетов);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если НЕ КурсВалютыАктуален(ДатаДокумента, ВалютаВзаиморасчетов) Тогда
				Сообщить("Курс валюты по проекту: """ + Проект + """ устарел. Рекомендуется обновить его...");
			КонецЕсли;
			СуммаВВалютеУчета = СуммаВзаиморасчетов * Выборка.Курс;
		Иначе
			Сообщить("Отсутствуют актуальные курсы валюты");
		КонецЕсли;
	КонецЕсли;
	Возврат СуммаВВалютеУчета;
	
КонецФункции

// Проверяет курс валюты на актуальность.
//
// Параметры:
// ДатаДокумента - Дата.
// ВалютаВзаиморасчетов - Валюта.
// Возвращаемое значение:
// Актуален - Булево.
//
// ................................................................................
Функция КурсВалютыАктуален(ДатаДокумента, ВалютаВзаиморасчетов)
	
	Актуален = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РАЗНОСТЬДАТ(КурсыВалют.Период, &Дата, ДЕНЬ) КАК РазницаДней
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Валюта = &Валюта
	|	И КурсыВалют.Период <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	КурсыВалют.Период УБЫВ";
	Запрос.УстановитьПараметр("Дата"  , ДатаДокумента);
	Запрос.УстановитьПараметр("Валюта", ВалютаВзаиморасчетов);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.РазницаДней > 1 Тогда
			Актуален = Ложь;
		КонецЕсли;
	Иначе
		Сообщить("Отсутствуют актуальные курсы валюты");
		Актуален = Ложь;
	КонецЕсли;
	
	Возврат Актуален;
	
КонецФункции

Функция ПолучитьСтоимостьЧасаРаботыКонтрагента(Дата, Контрагент) Экспорт
	
	СтоимостьЧасаРаботы = 0;
	ЗапросСтоимостиЧасаРаботы = Новый Запрос;
	ЗапросСтоимостиЧасаРаботы.Текст =
	"ВЫБРАТЬ
	|	СтоимостьЗаЧасРаботыСрезПоследних.ЦенаЗаЧасРаботы
	|ИЗ
	|	РегистрСведений.СтоимостьЗаЧасРаботы.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК СтоимостьЗаЧасРаботыСрезПоследних";
	ЗапросСтоимостиЧасаРаботы.УстановитьПараметр("ДатаСреза" , Дата);
	ЗапросСтоимостиЧасаРаботы.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = ЗапросСтоимостиЧасаРаботы.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСтоимостиЧасаРаботы = РезультатЗапроса.Выбрать();
		ВыборкаСтоимостиЧасаРаботы.Следующий();
		СтоимостьЧасаРаботы = ВыборкаСтоимостиЧасаРаботы.ЦенаЗаЧасРаботы;
	КонецЕсли;
	Возврат СтоимостьЧасаРаботы;
	
КонецФункции

Функция ПолучитьТекущееВремяВыполнения(Дата, АналитикаУчетаПоКонтрагентам) Экспорт
	
	ВремяВыполненияТекущее = 0;
	
	ЗапросВремениВыполнения = Новый Запрос;
	ЗапросВремениВыполнения.Текст =
	"ВЫБРАТЬ
	|	УП_ВремяВыполнениеПроектов_ПланСрезПоследних.ВремяВыполнения
	|ИЗ
	|	РегистрСведений.УП_ВремяВыполнениеПроектов_План.СрезПоследних(&ДатаСреза, АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам) КАК УП_ВремяВыполнениеПроектов_ПланСрезПоследних";
	ЗапросВремениВыполнения.УстановитьПараметр("ДатаСреза"                   , Дата);
	ЗапросВремениВыполнения.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
	ВыборкаЗапросаВремениВыполнения = ЗапросВремениВыполнения.Выполнить().Выбрать();
	Если ВыборкаЗапросаВремениВыполнения.Следующий() Тогда
		ВремяВыполненияТекущее = ВыборкаЗапросаВремениВыполнения.ВремяВыполнения;
	КонецЕсли;
	Возврат ВремяВыполненияТекущее;
	
КонецФункции

Функция ПолучитьТекущуюСтоимостьПроекта(Дата, АналитикаУчетаПоКонтрагентам) Экспорт
	
	СтоимостьТекущее = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УП_СтоимостьПроектовСрезПоследних.Сумма
	|ИЗ
	|	РегистрСведений.УП_СтоимостьПроектов.СрезПоследних(&ДатаСреза, АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам) КАК УП_СтоимостьПроектовСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза"                   , Дата);
	Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтоимостьТекущее = Выборка.Сумма;
	КонецЕсли;
	Возврат СтоимостьТекущее;
	
КонецФункции

Функция ПолучитьПлановуюТекущуюСтоимостьПроекта(Дата, АналитикаУчетаПоКонтрагентам) Экспорт
	
	СтоимостьТекущее = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УП_СтоимостьПроектовСрезПоследних.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.УП_СтоимостьПроектов.СрезПоследних(&ДатаСреза, АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам) КАК УП_СтоимостьПроектовСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза"                   , Дата);
	Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтоимостьТекущее = Выборка.Сумма;
	КонецЕсли;
	Возврат СтоимостьТекущее;
	
КонецФункции

Функция ПолучитьПлановуюТекущуюСтоимостьПроектаДляИсполнителя(АналитикаУчетаПоКонтрагентам, Исполнитель) Экспорт
	
	СтоимостьТекущее = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УП_ИсполнителиПроектов.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.УП_ИсполнителиПроектов КАК УП_ИсполнителиПроектов
	|ГДЕ
	|	УП_ИсполнителиПроектов.АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам
	|	И УП_ИсполнителиПроектов.Исполнитель = &Исполнитель";
	Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
	Запрос.УстановитьПараметр("Исполнитель"                 , Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтоимостьТекущее = Выборка.Сумма;
	КонецЕсли;
	Возврат СтоимостьТекущее;
	
КонецФункции

Функция ПолучитьВалютуУчета() Экспорт
	
	Возврат Константы.ВалютаУчета.Получить();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиДляРаботыСКлючамиАналитики

// Функция получает элемент справочника - ключ аналитики учета.
//
// Параметры:
//	ПараметрыАналитики - Коллекция - Коллекция параметров для получения ключа
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Найденный элемент справочника
//
Функция ЗначениеКлючаАналитики(ПараметрыАналитики) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоКонтрагентам.Ссылка КАК КлючАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоКонтрагентам КАК КлючиАналитикиУчетаПоКонтрагентам
	|ГДЕ
	|	КлючиАналитикиУчетаПоКонтрагентам.Контрагент = &Контрагент
	|	И КлючиАналитикиУчетаПоКонтрагентам.Клиент = &Клиент
	|	И КлючиАналитикиУчетаПоКонтрагентам.Проект = &Проект
	|	И НЕ КлючиАналитикиУчетаПоКонтрагентам.ПометкаУдаления";
	Запрос.УстановитьПараметр("Контрагент", ПараметрыАналитики.Контрагент);
	Запрос.УстановитьПараметр("Клиент"    , ПараметрыАналитики.Клиент);
	Запрос.УстановитьПараметр("Проект"    , ПараметрыАналитики.Проект);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЭлементКлючАналитики = Выборка.КлючАналитики;
	Иначе
		ЭлементКлючАналитики = СоздатьКлючАналитики(ПараметрыАналитики);
	КонецЕсли;
	
	Возврат ЭлементКлючАналитики;
	
КонецФункции

// Функция получает элемент справочника - ключ аналитики учета.
//
// Параметры:
//	ПараметрыАналитики - Выборка или Структура  с полями "Организация, Партнер, Контрагент".
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Найденный элемент справочника
//
Функция СоздатьКлючАналитики(ПараметрыАналитики)
	
	// Создание нового ключа аналитики.
	СправочникОбъект = Справочники.КлючиАналитикиУчетаПоКонтрагентам.СоздатьЭлемент();
	СправочникОбъект.Наименование = ПолучитьПолноеНаименованиеКлючаАналитики(ПараметрыАналитики);
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики, "Контрагент, Клиент, Проект");
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьПолноеНаименованиеКлючаАналитики(ПараметрыАналитики)
	
	Наименование = "";
	
	Для Каждого КлючПараметра Из ПараметрыАналитики Цикл
		ТекстЗначения = Строка(КлючПараметра.Значение);
		Если НЕ ПустаяСтрока(ТекстЗначения) Тогда
			Наименование = Наименование + ТекстЗначения + "; ";
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(Наименование, 2) = "; " Тогда
		Наименование = Лев(Наименование, СтрДлина(Наименование) - 2);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Функция ПолучитьСостояниеПроекта(Дата, ПараметрыАналитики)
	
	// Если есть оплат
	
	
	
	
КонецФункции

#КонецОбласти

#Область ОбработчикиДляРаботыСПроектами

Функция ПолучитьИсполнителейПроекта(АналитикаУчетаПоКонтрагентам) Экспорт
	
	Исполнители = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УП_ИсполнителиПроектов.Исполнитель,
	|	УП_ИсполнителиПроектов.ВремяВыполнения,
	|	УП_ИсполнителиПроектов.Сумма
	|ИЗ
	|	РегистрСведений.УП_ИсполнителиПроектов КАК УП_ИсполнителиПроектов
	|ГДЕ
	|	УП_ИсполнителиПроектов.АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам";
	Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
	Исполнители = Запрос.Выполнить().Выгрузить();
	
	Возврат Исполнители;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтактноеЛицоКонтрагента(Контрагент) Экспорт
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И КонтактныеЛица.Основной";
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактноеЛицо = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

#КонецОбласти