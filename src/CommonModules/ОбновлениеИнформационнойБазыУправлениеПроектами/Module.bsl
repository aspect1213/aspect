////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки СтандартныеПодсистемы (БСП).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

Процедура ПерейтиНаВерсию_1_0_0_9() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Клиенты.Ссылка КАК Клиент,
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Клиенты
	|		ПО Контрагенты.Наименование = Клиенты.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО Контрагенты.Ссылка = КонтактныеЛица.Владелец
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа
	|	И Клиенты.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Контрагент";
	Результат = Запрос.Выполнить();
	Выборка_Контрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка_Контрагент.Следующий() Цикл
		КлиентОбъект = Справочники.Клиенты.СоздатьЭлемент();
		КлиентОбъект.Контрагент = Выборка_Контрагент.Контрагент;
		КлиентОбъект.Наименование = Строка(Выборка_Контрагент.Контрагент);
		
		// КИ контрагента
		Для каждого ТекСтрока_КИ Из Выборка_Контрагент.Контрагент.КонтактнаяИнформация Цикл
			НоваяСтрока_КИ = КлиентОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока_КИ, ТекСтрока_КИ);
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКонтрагента Тогда
				НоваяСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКлиента;
			КонецЕсли;
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента Тогда
				НоваяСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКлиента;
			КонецЕсли;
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента Тогда
				НоваяСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКлиента;
			КонецЕсли;
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				НоваяСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКлиента;
			КонецЕсли;
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				НоваяСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКлиента;
			КонецЕсли;
		КонецЦикла;
		Попытка
			КлиентОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		// контактные лица
		ВыборкаКонтактныхЛиц = Выборка_Контрагент.Выбрать();
		Пока ВыборкаКонтактныхЛиц.Следующий() Цикл
			Если НЕ ВыборкаКонтактныхЛиц.КонтактноеЛицо = NULL Тогда
				Объект_КЛ                                      = Справочники.КонтактныеЛица.СоздатьЭлемент();
				Объект_КЛ.ФизическоеЛицо                       = ВыборкаКонтактныхЛиц.КонтактноеЛицо.ФизическоеЛицо;
				Объект_КЛ.Комментарии                          = ВыборкаКонтактныхЛиц.КонтактноеЛицо.Комментарии;
				Объект_КЛ.УчаствуетВРассылкеПоЭлектроннойПочте = ВыборкаКонтактныхЛиц.КонтактноеЛицо.УчаствуетВРассылкеПоЭлектроннойПочте;
				Объект_КЛ.Основной                             = ВыборкаКонтактныхЛиц.КонтактноеЛицо.Основной;
				Объект_КЛ.Наименование                         = ВыборкаКонтактныхЛиц.КонтактноеЛицо.Наименование;
				Объект_КЛ.Владелец                             = КлиентОбъект.Ссылка;
				
				// КИ КЛ
				Для каждого ТекСтрока_КИ_КЛ Из ВыборкаКонтактныхЛиц.КонтактноеЛицо.КонтактнаяИнформация Цикл
					НоваяСтрока_КИ = Объект_КЛ.КонтактнаяИнформация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока_КИ, ТекСтрока_КИ_КЛ);
				КонецЦикла;
				Попытка
					Объект_КЛ.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// обработка проектов
	ЗапросПроектов = Новый Запрос;
	ЗапросПроектов.Текст =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Клиенты.Ссылка КАК Клиент
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Клиенты
	|		ПО Проекты.Контрагент = Клиенты.Контрагент
	|			И Проекты.Контрагент.Наименование = Клиенты.Наименование
	|ГДЕ
	|	Проекты.Клиент = &Клиент";
	ЗапросПроектов.УстановитьПараметр("Клиент", Справочники.Клиенты.ПустаяСсылка());
	РезультатЗапросаПроектов = ЗапросПроектов.Выполнить();
	ВыборкаЗапросаПроектов = РезультатЗапросаПроектов.Выбрать();
	Пока ВыборкаЗапросаПроектов.Следующий() Цикл
		Проект_Объект        = ВыборкаЗапросаПроектов.Проект.ПолучитьОбъект();
		Проект_Объект.Клиент = ВыборкаЗапросаПроектов.Клиент;
		Попытка
			Проект_Объект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_10() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеРаботНадПроектом.Ссылка
	|ИЗ
	|	Документ.ВыполнениеРаботНадПроектом КАК ВыполнениеРаботНадПроектом
	|ГДЕ
	|	ВыполнениеРаботНадПроектом.Проведен
	|	И НЕ ВыполнениеРаботНадПроектом.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеРаботНадПроектом.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.Проекты.Очистить();
		НоваяСтрока                 = ДокОбъект.Проекты.Добавить();
		НоваяСтрока.Контрагент      = ДокОбъект.Контрагент;
		ЗапросКлиента = Новый Запрос;
		ЗапросКлиента.Текст =
		"ВЫБРАТЬ
		|	Клиенты.Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Контрагент = &Контрагент
		|	И Клиенты.Наименование = &Наименование";
		ЗапросКлиента.УстановитьПараметр("Наименование", Строка(ДокОбъект.Контрагент));
		ЗапросКлиента.УстановитьПараметр("Контрагент"  , ДокОбъект.Контрагент);
		ВыборкаКлиентов = ЗапросКлиента.Выполнить().Выбрать();
		ВыборкаКлиентов.Следующий();
		НоваяСтрока.Клиент          = ВыборкаКлиентов.Ссылка;
		НоваяСтрока.Проект          = ДокОбъект.ПроектУдалить;
		НоваяСтрока.ВремяВыполнения = ДокОбъект.ВремяВыполненияУдалить;
		НоваяСтрока.Комментарий     = ДокОбъект.КомментарийХранилищеЗначенийУдалить.Получить().ПолучитьТекст();
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	ЗапросВыполненияПроектов = Новый Запрос;
	ЗапросВыполненияПроектов.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроектов.Ссылка
	|ИЗ
	|	Документ.ВыполнениеПроектов КАК ВыполнениеПроектов
	|ГДЕ
	|	ВыполнениеПроектов.Проведен
	|	И НЕ ВыполнениеПроектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеПроектов.Дата";
	Результат = ЗапросВыполненияПроектов.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъектВыполнениеПроектов = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъектВыполнениеПроектов.Проекты Цикл
			ТекСтрока.Контрагент = ДокОбъектВыполнениеПроектов.Контрагент;
			ЗапросКлиента = Новый Запрос;
			ЗапросКлиента.Текст =
			"ВЫБРАТЬ
			|	Клиенты.Ссылка
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	Клиенты.Контрагент = &Контрагент
			|	И Клиенты.Наименование = &Наименование";
			ЗапросКлиента.УстановитьПараметр("Наименование", Строка(ДокОбъектВыполнениеПроектов.Контрагент));
			ЗапросКлиента.УстановитьПараметр("Контрагент"  , ДокОбъектВыполнениеПроектов.Контрагент);
			ВыборкаКлиентов = ЗапросКлиента.Выполнить().Выбрать();
			ВыборкаКлиентов.Следующий();
			ТекСтрока.Клиент     = ВыборкаКлиентов.Ссылка;
			ТекСтрока.Валюта     = ДокОбъектВыполнениеПроектов.ВалютаВзаиморасчетовУдалить;
		КонецЦикла;
		Попытка
			ДокОбъектВыполнениеПроектов.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	ЗапросПоступлений = Новый Запрос;
	ЗапросПоступлений.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеОплатыОтКонтрагента.Ссылка
	|ИЗ
	|	Документ.ПоступлениеОплатыОтКонтрагента КАК ПоступлениеОплатыОтКонтрагента
	|ГДЕ
	|	ПоступлениеОплатыОтКонтрагента.Проведен
	|	И НЕ ПоступлениеОплатыОтКонтрагента.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеОплатыОтКонтрагента.Дата";
	Результат = ЗапросПоступлений.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъектПоступление = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъектПоступление.Проекты Цикл
			ЗапросКлиента = Новый Запрос;
			ЗапросКлиента.Текст =
			"ВЫБРАТЬ
			|	Клиенты.Ссылка
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	Клиенты.Контрагент = &Контрагент
			|	И Клиенты.Наименование = &Наименование";
			ЗапросКлиента.УстановитьПараметр("Наименование", Строка(ДокОбъектПоступление.Контрагент));
			ЗапросКлиента.УстановитьПараметр("Контрагент"  , ДокОбъектПоступление.Контрагент);
			ВыборкаКлиентов = ЗапросКлиента.Выполнить().Выбрать();
			ВыборкаКлиентов.Следующий();
			ТекСтрока.Клиент = ВыборкаКлиентов.Ссылка;
		КонецЦикла;
		Попытка
			ДокОбъектПоступление.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_11() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СогласованиеПроектов.Ссылка
	|ИЗ
	|	Документ.СогласованиеПроектов КАК СогласованиеПроектов
	|ГДЕ
	|	СогласованиеПроектов.Проведен
	|	И НЕ СогласованиеПроектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СогласованиеПроектов.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъект.Проекты Цикл
			ЗапросКлиента = Новый Запрос;
			ЗапросКлиента.Текст =
			"ВЫБРАТЬ
			|	Клиенты.Ссылка
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	Клиенты.Контрагент = &Контрагент
			|	И Клиенты.Наименование = &Наименование";
			ЗапросКлиента.УстановитьПараметр("Наименование", Строка(ДокОбъект.Контрагент));
			ЗапросКлиента.УстановитьПараметр("Контрагент"  , ДокОбъект.Контрагент);
			ВыборкаКлиентов = ЗапросКлиента.Выполнить().Выбрать();
			ВыборкаКлиентов.Следующий();
			ТекСтрока.Клиент = ВыборкаКлиентов.Ссылка;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроектов.Ссылка
	|ИЗ
	|	Документ.ВыполнениеПроектов КАК ВыполнениеПроектов
	|ГДЕ
	|	ВыполнениеПроектов.Проведен
	|	И НЕ ВыполнениеПроектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеПроектов.Дата";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_15() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СогласованиеПроектов.Ссылка
	|ИЗ
	|	Документ.СогласованиеПроектов КАК СогласованиеПроектов
	|ГДЕ
	|	СогласованиеПроектов.Проведен
	|	И НЕ СогласованиеПроектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СогласованиеПроектов.Дата";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъект.Проекты Цикл
			ТекСтрока.ВыполнитьДо = ДокОбъект.Дата + 86400 * 7;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроектов.Ссылка
	|ИЗ
	|	Документ.ВыполнениеПроектов КАК ВыполнениеПроектов
	|ГДЕ
	|	ВыполнениеПроектов.Проведен
	|	И НЕ ВыполнениеПроектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеПроектов.Дата";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	ЗапросКонтрагентов = Новый Запрос;
	ЗапросКонтрагентов.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ЭтоГруппа";
	ВыборкаКонтрагентов = ЗапросКонтрагентов.Выполнить().Выбрать();
	Пока ВыборкаКонтрагентов.Следующий() Цикл
		ЗапросКлиента = Новый Запрос;
		ЗапросКлиента.Текст =
		"ВЫБРАТЬ
		|	Клиенты.Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Контрагент = &Контрагент
		|	И Клиенты.Наименование = &Наименование";
		ЗапросКлиента.УстановитьПараметр("Наименование", Строка(ВыборкаКонтрагентов.Ссылка));
		ЗапросКлиента.УстановитьПараметр("Контрагент"  , ВыборкаКонтрагентов.Ссылка);
		ВыборкаКлиентов = ЗапросКлиента.Выполнить().Выбрать();
		Если ВыборкаКлиентов.Следующий() Тогда
			КлиентОбъект = ВыборкаКлиентов.Ссылка.ПолучитьОбъект();
			КлиентОбъект.Основной = Истина;
			Попытка
				КлиентОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_40() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеРаботНадПроектом.Ссылка
	|ИЗ
	|	Документ.ВыполнениеРаботНадПроектом КАК ВыполнениеРаботНадПроектом
	|ГДЕ
	|	ВыполнениеРаботНадПроектом.Проведен
	|	И НЕ ВыполнениеРаботНадПроектом.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыполнениеРаботНадПроектом.Дата";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_45() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроектов.Ссылка,
	|	ВыполнениеПроектов.Дата КАК Дата
	|ИЗ
	|	Документ.ВыполнениеПроектов КАК ВыполнениеПроектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъект.Проекты Цикл
			ПараметрыАналитики = Новый Структура();
			ПараметрыАналитики.Вставить("Контрагент", ДокОбъект.Контрагент);
			ПараметрыАналитики.Вставить("Клиент"    , ТекСтрока.Клиент);
			ПараметрыАналитики.Вставить("Проект"    , ТекСтрока.Проект);
			АналитикаУчетаПоКонтрагентам  = УП_РаботаСДокументамиСервер.ЗначениеКлючаАналитики(ПараметрыАналитики);
			ТекСтрока.ВремяВыполнения     = УП_ОбщегоНазначения_Сервер.ПреобразоватьЧислоВВремя_Строка(УП_РаботаСДокументамиСервер.ПолучитьТекущееВремяВыполнения(ДокОбъект.Дата, АналитикаУчетаПоКонтрагентам));
			ТекСтрока.Цена                = УП_РаботаСДокументамиСервер.ПолучитьСтоимостьЧасаРаботыКонтрагента(ДокОбъект.Дата, ДокОбъект.Контрагент);
			ТекСтрока.ПроектПредставление = ТекСтрока.Проект;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_47() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыполнениеПроектов.Ссылка,
	|	ВыполнениеПроектов.Дата КАК Дата
	|ИЗ
	|	Документ.ВыполнениеПроектов КАК ВыполнениеПроектов
	|ГДЕ
	|	ВыполнениеПроектов.Проведен
	|	И ВыполнениеПроектов.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоКоду("000000023"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого ТекСтрока Из ДокОбъект.Проекты Цикл
			ПараметрыАналитики = Новый Структура();
			ПараметрыАналитики.Вставить("Контрагент", ДокОбъект.Контрагент);
			ПараметрыАналитики.Вставить("Клиент"    , ТекСтрока.Клиент);
			ПараметрыАналитики.Вставить("Проект"    , ТекСтрока.Проект);
			АналитикаУчетаПоКонтрагентам  = УП_РаботаСДокументамиСервер.ЗначениеКлючаАналитики(ПараметрыАналитики);
			ТекСтрока.ВремяВыполнения     = УП_ОбщегоНазначения_Сервер.ПреобразоватьЧислоВВремя_Строка(УП_РаботаСДокументамиСервер.ПолучитьТекущееВремяВыполнения(ДокОбъект.Дата, АналитикаУчетаПоКонтрагентам));
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ВремяВыполнения) Тогда
				ТекСтрока.ВремяВыполнения = "01:00";
			КонецЕсли;
			ТекСтрока.Цена                = УП_РаботаСДокументамиСервер.ПолучитьСтоимостьЧасаРаботыКонтрагента(ДокОбъект.Дата, ДокОбъект.Контрагент);
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Цена) Тогда
				ТекСтрока.Цена = ТекСтрока.Сумма;
			КонецЕсли;
			ТекСтрока.ПроектПредставление = ТекСтрока.Проект;
		КонецЦикла;
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_48() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.Владелец = СпрОбъект.Контрагент;
		Попытка
			СпрОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_49() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Основной";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ПрефиксМаркеровки = СпрОбъект.Владелец.ПрефиксМаркеровки;
		СпрОбъект.ИНН = СпрОбъект.Владелец.ИНН;
		СпрОбъект.ЮридическоеФизическоеЛицо = СпрОбъект.Владелец.ЮридическоеФизическоеЛицо;
		СпрОбъект.КПП = СпрОбъект.Владелец.КПП;
		СпрОбъект.БизнесРегион = СпрОбъект.Владелец.БизнесРегион;
		СпрОбъект.НаименованиеПолное = СпрОбъект.Владелец.НаименованиеПолное;
		СпрОбъект.КонтактнаяИнформация.Очистить();
		Для каждого ТекСтрока_КИ Из СпрОбъект.Владелец.КонтактнаяИнформация Цикл
			Новая_КИ = СпрОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(Новая_КИ, ТекСтрока_КИ);
			Если ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				Новая_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКлиента;
			ИначеЕсли ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента Тогда
				Новая_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКлиента;
			ИначеЕсли ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента Тогда
				Новая_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКлиента;
			ИначеЕсли ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКонтрагента Тогда
				Новая_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКлиента;
			ИначеЕсли ТекСтрока_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				Новая_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКлиента;
			КонецЕсли;
		КонецЦикла;
		Попытка
			СпрОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЦикла;
	
	Справочники.Клиенты.ОбновитьПредопределенныеВидыКонтактнойИнформации();
	Справочники.ФизическиеЛица.ОбновитьПредопределенныеВидыКонтактнойИнформации();
	Справочники.Контрагенты.ОбновитьПредопределенныеВидыКонтактнойИнформации();
	Справочники.КонтактныеЛица.ОбновитьПредопределенныеВидыКонтактнойИнформации();
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "<номер версии>";
	//Обработчик.Процедура = "<полное имя экспортной процедуры>";
	//Обработчик.НачальноеЗаполнение = {Истина|Ложь};
	//Обработчик.РежимВыполнения = {"Монопольно"|"Оперативно"|"Отложенно"};
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_9";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_11";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_15";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.40";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_40";
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.0.45";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_45";
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.47";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_47";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.48";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_48";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.49";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУправлениеПроектами.ПерейтиНаВерсию_1_0_0_49";
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// Обработчики этого события для подсистем БСП добавляются через подписку на служебное событие:
	// "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы".
	//
	// Процедуры обработки этого события всех подсистем БСП имеют то же имя, что и эта процедура,
	// но размещены в своих подсистемах.
	// Чтобы найти процедуры можно выполнить глобальный поиск по имени процедуры.
	// Чтобы найти модули в которых размещены процедуры, можно выполнить поиск по имени события.
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПередОбновлениемИнформационнойБазы");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПередОбновлениемИнформационнойБазы();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	// Вызываем процедуры-обработчики служебного события "ПослеОбновленияИнформационнойБазы".
	// (Для быстрого перехода к процедурам-обработчикам выполнить глобальный поиск по имени события.).
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Если Обработчик.Подсистема <> "СтандартныеПодсистемы" Тогда
			Продолжить;
		КонецЕсли;
		Обработчик.Модуль.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
			ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

#КонецОбласти
