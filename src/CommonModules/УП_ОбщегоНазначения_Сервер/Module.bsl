//////////////////////////////////////////////////////////////////////////////////
//// ПРОЧИЕ ПРОЦЕДУРЫ И ФУКНЦИИ

// Оповещает о днях рождениях
// ................................................................................
Функция ОповеститьОДняхРождениях() Экспорт
	
	ЗапросДнейРождения = Новый Запрос;
	ЗапросДнейРождения.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	МЕСЯЦ(ФизическиеЛица.ДатаРождения) = МЕСЯЦ(&ТекущаяДата)
	|	И ДЕНЬ(ФизическиеЛица.ДатаРождения) = ДЕНЬ(&ТекущаяДата)";
	ЗапросДнейРождения.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ВыборкаЗапроса = ЗапросДнейРождения.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "У " + Строка(ВыборкаЗапроса.Ссылка) + " сегодня день рождения";
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецФункции

// Получает актуальный курс валюты.
// ................................................................................
Функция ПолучитьАктуальныйКурсВалюты(Период, Валюта) Экспорт

	Курс = 0;
	Если Валюта = Константы.ВалютаУчета.Получить() Тогда
		Курс = 1;
	КонецЕсли;
	ЗапросКурса = Новый Запрос;
	ЗапросКурса.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	ЗапросКурса.УстановитьПараметр("ДатаСреза", КонецДня(Период));
	ЗапросКурса.УстановитьПараметр("Валюта"   , Валюта);
	РезультатЗапросаКурса = ЗапросКурса.Выполнить();
	Если НЕ РезультатЗапросаКурса.Пустой() Тогда
		ВыборкаЗапросаКурса = РезультатЗапросаКурса.Выбрать();
		ВыборкаЗапросаКурса.Следующий();
		Курс = ВыборкаЗапросаКурса.Курс;
	Иначе
		ТекстСообщения = "На дату " + Формат(Период, "ДЛФ=D") + " для валюты " + Валюта + " не обнаружено курса. Необходимо его внести!";
	КонецЕсли;
	Возврат Курс;

КонецФункции // ПолучитьАктуальныйКурсВалюты()

// Преобразовывает время в число.
// ................................................................................
Функция ПреобразоватьВремя(Знач СтрокаВремя) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаВремя) Тогда
		СтрокаВремя = "00:00";
	КонецЕсли;
	
	СтрокаВремя = СтрокаВремя + ":";
	ЧислоВремя = 0;
	ДлинаСтроки = СтрДлина(СтрокаВремя);
	Счетчик = 1;
	Часы    = 0;
	Минуты  = 0;
	ТекущаяСтрока = "";
	Для i=1 По ДлинаСтроки Цикл
		ТекущийСимвол = Прав(Лев(СтрокаВремя, i), 1);
		Если ТекущийСимвол = ":" Тогда
			Если Счетчик = 1 Тогда
				Часы = Число(ТекущаяСтрока);
				ТекущаяСтрока = "";
			ИначеЕсли Счетчик = 2 Тогда
				Минуты = Число(ТекущаяСтрока);
				ТекущаяСтрока = "";
			КонецЕсли;
			Счетчик = Счетчик + 1;
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
	КонецЦикла;
	ЧислоВремя = Часы*60 + Минуты;
	Возврат ЧислоВремя;
	
КонецФункции // ПреобразоватьВремя()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С СКД

// Преобразовывает число в время.
// ................................................................................
Функция ПреобразоватьЧислоВВремя_Строка(ЧислоМинут) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЧислоМинут) Тогда
		ЧислоМинут = 0;
	КонецЕсли;
	Часов = Цел(ЧислоМинут / 60);
	Минут = ЧислоМинут - Цел(ЧислоМинут / 60) * 60;
	Если СтрДлина(Строка(Часов)) = 1 Тогда
		Часов = "0" + Строка(Часов);
	КонецЕсли;
	Если СтрДлина(Строка(Минут)) = 1 Тогда
		Минут = "0" + Строка(Минут);
	КонецЕсли;
	Возврат Строка(Часов) + ":" + Строка(Минут);

КонецФункции // ПреобразоватьВремя()

// Преобразовывает число в минуты
// ................................................................................
Функция ПреобразоватьЧислоМинутВСтрокуВремени(ЧислоМинут) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЧислоМинут) Тогда
		ЧислоМинут = 0;
	КонецЕсли;
	Часов = Цел(ЧислоМинут / 60);
	Минут = ЧислоМинут - Цел(ЧислоМинут / 60) * 60;
	Возврат Строка(Часов) + " ч. " + Строка(Минут) + " м.";
	
КонецФункции // ()

// Убирает пробелы.
// ................................................................................
Функция УбратьПробелы(ОбрабатываемаяСтрока) Экспорт

	Возврат СокрЛП(ОбрабатываемаяСтрока);

КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С СМС

// Выполняет рассылку смс исполнителям.
// ................................................................................
Процедура ОтправкаСМС() Экспорт

	//// получить неотработанные заявки и отправить смс исполнителю
	//ЗапросЗаявок = Новый Запрос;
	//ЗапросЗаявок.Текст =
	//"ВЫБРАТЬ
	//|	ЗаказНаВыполнениеРаботы.Ссылка,
	//|	ЗаказНаВыполнениеРаботы.ВерсияДанных,
	//|	ЗаказНаВыполнениеРаботы.ПометкаУдаления,
	//|	ЗаказНаВыполнениеРаботы.Номер,
	//|	ЗаказНаВыполнениеРаботы.Дата,
	//|	ЗаказНаВыполнениеРаботы.Проведен,
	//|	ЗаказНаВыполнениеРаботы.Контрагент,
	//|	ЗаказНаВыполнениеРаботы.ПланируемаяДатаРаботы,
	//|	ЗаказНаВыполнениеРаботы.Выполнено,
	//|	ЗаказНаВыполнениеРаботы.Комментарий,
	//|	ЗаказНаВыполнениеРаботы.Проект,
	//|	ЗаказНаВыполнениеРаботы.Исполнитель
	//|ИЗ
	//|	Документ.ЗаказНаВыполнениеРаботы КАК ЗаказНаВыполнениеРаботы
	//|ГДЕ
	//|	ЗаказНаВыполнениеРаботы.Проведен
	//|	И НЕ ЗаказНаВыполнениеРаботы.Выполнено";
	//РезультатЗапросаЗаявок = ЗапросЗаявок.Выполнить();
	//Если НЕ РезультатЗапросаЗаявок.Пустой() Тогда
	//	РассылкаСМС = Обработки.РассылкаСМС.Создать();
	//	ВыборкаРезультатаЗапросаЗаявок = РезультатЗапросаЗаявок.Выбрать();
	//	Пока ВыборкаРезультатаЗапросаЗаявок.Следующий() Цикл
	//		ТекстСМС = Лев(Строка(ВыборкаРезультатаЗапросаЗаявок.Контрагент) + " " + Строка(ВыборкаРезультатаЗапросаЗаявок.Проект), 70);
	//		РассылкаСМС.ОтправитьСМСНаСервере(ТекстСМС, "79603738333", "TKSrcy10&", ВыборкаРезультатаЗапросаЗаявок.Исполнитель.Телефон);
	//		ТекстСМС = "";
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ЭЛЕКТРОННОЙ ПОЧТОЙ

// Выполняет рассылку по электронной почте.
// ................................................................................
Процедура ОтправитьИнформациюНаПочту(Основание = Неопределено, Email, Тема, Текст, ТипТекста = Неопределено, Комментарий) Экспорт

	Если ТипТекста = Неопределено Тогда
		ТипТекста = Перечисления.ТипыТекстовСообщения.ПростойТекст;
	КонецЕсли;
	НовоеСообщение                  = Документы.Сообщение.СоздатьДокумент();
	НовоеСообщение.Дата             = ТекущаяДата();
	НовоеСообщение.ДатаОтправления  = ТекущаяДата();
	НовоеСообщение.ИмяОтправителя   = ПараметрыСеанса.ТекущийПочтовыйЯщик.Имя;
	НовоеСообщение.АдресОтправителя = ПараметрыСеанса.ТекущийПочтовыйЯщик.АдресЭлектроннойПочты;
	НовоеСообщение.Получатели       = Email;
	НовоеСообщение.Тема             = Тема;
	НовоеСообщение.Текст            = Текст;
	НовоеСообщение.ТипТекста        = ТипТекста;
	НовоеСообщение.ПочтовыйЯщик     = ПараметрыСеанса.ТекущийПочтовыйЯщик;
	Если НЕ Основание = Неопределено Тогда
		НовоеСообщение.Основание    = Основание;
	КонецЕсли;
	НовоеСообщение.Комментарий      = Комментарий;
	НовоеСообщение.Отправить();
	Попытка
		НовоеСообщение.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С КОНТРАГЕНТАМИ

// Получает сведения о контрагенте
// ................................................................................
Функция СведенияОЮрЛице(Контрагент) Экспорт
	
	СтруктураСведений = Новый Структура("Контрагент, Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо,
	|ИНН, КПП, БизнесРегион, ПрефиксМаркеровки, Адрес, Телефон, Email, ВебСтраница, Скайп");
	Таблица = ?(ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты"), "Контрагенты", "Клиенты");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.БизнесРегион КАК БизнесРегион,
	|	Контрагенты.ПрефиксМаркеровки КАК ПрефиксМаркеровки,
	|	КонтрагентыКонтактнаяИнформация.Тип КАК Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид КАК Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник." + Таблица + " КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + Таблица + ".КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса_Ссылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапроса_Ссылка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураСведений, ВыборкаЗапроса_Ссылка);
			Выборка_КИ = ВыборкаЗапроса_Ссылка.Выбрать();
			Пока Выборка_КИ.Следующий() Цикл
				Если Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКонтрагента
					ИЛИ Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресКлиента Тогда
					СтруктураСведений.Адрес = Выборка_КИ.Представление;
				КонецЕсли;
				Если Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента
					ИЛИ Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКлиента Тогда
					СтруктураСведений.Телефон = Выборка_КИ.Представление;
				КонецЕсли;
				Если Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКонтрагента
					ИЛИ Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.SkypeКлиента Тогда
					СтруктураСведений.Скайп = Выборка_КИ.Представление;
				КонецЕсли;
				Если Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКонтрагента
					ИЛИ Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.ВебСтраницаКлиента Тогда
					СтруктураСведений.ВебСтраница = Выборка_КИ.Представление;
				КонецЕсли;
				Если Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента
					ИЛИ Выборка_КИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКлиента Тогда
					СтруктураСведений.Email = Выборка_КИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураСведений;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДПИСКАМИ НА СОБЫТИЯ

// Подписка на событие "Обработка проведение". Всех документов.
// ................................................................................
Процедура ПодпискаНаСобытиеОбработкиПроведенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

	//ОтправитьСообщение = Ложь;
	//ТекстСообщения     = "";
	//Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВыполнениеПроектов") Тогда
	//	Если ЗначениеЗаполнено(Источник.Контрагент.АдресЭлектроннойПочты) Тогда
	//		Если Источник.УведомлятьЗаказчикаПоПочтеПриВыполнении Тогда
	//			ЗапросОтправленныхСообщений = Новый Запрос;
	//			ЗапросОтправленныхСообщений.Текст =
	//			"ВЫБРАТЬ
	//			|	Сообщение.Ссылка
	//			|ИЗ
	//			|	Документ.Сообщение КАК Сообщение
	//			|ГДЕ
	//			|	Сообщение.Основание = &Основание
	//			|	И Сообщение.Проведен";
	//			ЗапросОтправленныхСообщений.УстановитьПараметр("Основание", Источник.Ссылка);
	//			РезультатЗапросаОтправленныхСообщений = ЗапросОтправленныхСообщений.Выполнить();
	//			Если РезультатЗапросаОтправленныхСообщений.Пустой() Тогда
	//				ОтправитьСообщение = Истина;
	//				Для каждого ТекСтрока Из Источник.Проекты Цикл
	//					ТекстСообщения = ТекстСообщения + "Проект: """ + ТекСтрока.Проект + "" + " - " + ТекСтрока.Проект.УникальныйНомерПроекта + """ успешно выполнен. Стоимость проекта: " + Строка(Формат(ТекСтрока.СуммаВзаиморасчетов, "ЧГ=0")) + " " + Строка(Источник.ВалютаВзаиморасчетов) + "<br>";
	//				КонецЦикла;
	//				ЗапросЗадолженности = Новый Запрос;
	//				ЗапросЗадолженности.Текст =
	//				"ВЫБРАТЬ
	//				|	ВзаиморасчетыСКонтрагентамиОстатки.Проект,
	//				|	ВзаиморасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов,
	//				|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	//				|ИЗ
	//				|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, Контрагент = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки";
	//				ЗапросЗадолженности.УстановитьПараметр("ДатаОстатков", Источник.Дата);
	//				ЗапросЗадолженности.УстановитьПараметр("Контрагент"  , Источник.Контрагент);
	//				РезультатЗапросаЗадолженности = ЗапросЗадолженности.Выполнить();
	//				Если НЕ РезультатЗапросаЗадолженности.Пустой() Тогда
	//					ТекстСообщения = ТекстСообщения + "<br>" + "Также имеется задолженность по другим проектам:" + "<br>";
	//					ВыборкаЗапросаЗадолженности = РезультатЗапросаЗадолженности.Выбрать();
	//					СуммаВзаиморасчетов = 0;
	//					Пока ВыборкаЗапросаЗадолженности.Следующий() Цикл
	//						СуммаВзаиморасчетов = СуммаВзаиморасчетов + ВыборкаЗапросаЗадолженности.СуммаВзаиморасчетовОстаток;
	//						ТекстСообщения = ТекстСообщения + "По проекту: """ + ВыборкаЗапросаЗадолженности.Проект + "" + " - " + ВыборкаЗапросаЗадолженности.Проект.УникальныйНомерПроекта + """. Стоимость проекта: " + Строка(Формат(ВыборкаЗапросаЗадолженности.СуммаВзаиморасчетовОстаток, "ЧГ=0")) + " " + Строка(ВыборкаЗапросаЗадолженности.ВалютаВзаиморасчетов) + "<br>";
	//					КонецЦикла;
	//					ОбщаяСуммаЗадолженности = Число(Источник.Проекты.Итог("СуммаВзаиморасчетов")) + СуммаВзаиморасчетов;
	//					ТекстСообщения = ТекстСообщения + "<br>" + "Общая сумма задолженности: " + Строка(Формат(ОбщаяСуммаЗадолженности, "ЧГ=0")) + " " + Строка(Источник.ВалютаВзаиморасчетов) + "<br>";
	//				КонецЕсли;
	//				Если ЗначениеЗаполнено(Источник.ТекстУведомленияЗаказчика) Тогда
	//					ТекстСообщения = ТекстСообщения + "<br>" + "Комментарий: " + Источник.ТекстУведомленияЗаказчика;
	//				КонецЕсли;
	//			Иначе
	//				Сообщить("По документу: """ + Источник.Ссылка + """ уже было уведомление заказчика!");
	//			КонецЕсли;
	//			Если ОтправитьСообщение Тогда
	//				ОтправитьИнформациюНаПочту(Источник.Ссылка, Источник.Контрагент.АдресЭлектроннойПочты, Строка(ТекСтрока.Проект), ТекстСообщения, Перечисления.ТипыТекстовСообщения.HTML, "Создано автоматически при выполнении проекта");
	//			КонецЕсли;
	//		КонецЕсли;
	//	Иначе
	//		Сообщить("Не указан E-mail у заказчика...");
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры