//////////////////////////////////////////////////////////////////////////////////
//// РАЗДЕЛ ПРОЦЕДУР И ФУНКЦИЙ

Функция ПолучитьРезультатЗапросаПредоплаты(МоментВремени, Контрагент, Клиент, Проект) Экспорт
	
	// проверим на предоплату
	// сначала по проекту, потом по клиенту, потом по контрагенту
	Для i=1 По 3 Цикл
		ЗапросПредоплаты = Новый Запрос;
		Если i=1 Тогда
			// проект
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	УП_РасчетыСКонтрагентамиОстатки.АналитикаУчетаПоКонтрагентам,
			|	УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток * -1 КАК Предоплата
			|ИЗ
			|	РегистрНакопления.УП_РасчетыСКонтрагентами.Остатки(
			|			&МоментВремени,
			|			АналитикаУчетаПоКонтрагентам.Контрагент = &Контрагент
			|				И АналитикаУчетаПоКонтрагентам.Клиент = &Клиент
			|				И АналитикаУчетаПоКонтрагентам.Проект = &Проект) КАК УП_РасчетыСКонтрагентамиОстатки";
		ИначеЕсли i=2 Тогда
			// клиент
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	УП_РасчетыСКонтрагентамиОстатки.АналитикаУчетаПоКонтрагентам,
			|	УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток * -1 КАК Предоплата
			|ИЗ
			|	РегистрНакопления.УП_РасчетыСКонтрагентами.Остатки(
			|			&МоментВремени,
			|			АналитикаУчетаПоКонтрагентам.Контрагент = &Контрагент
			|				И АналитикаУчетаПоКонтрагентам.Клиент = &Клиент) КАК УП_РасчетыСКонтрагентамиОстатки";
		ИначеЕсли i=3 Тогда
			// контрагент
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	УП_РасчетыСКонтрагентамиОстатки.АналитикаУчетаПоКонтрагентам,
			|	УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток * -1 КАК Предоплата
			|ИЗ
			|	РегистрНакопления.УП_РасчетыСКонтрагентами.Остатки(&МоментВремени, АналитикаУчетаПоКонтрагентам.Контрагент = &Контрагент) КАК УП_РасчетыСКонтрагентамиОстатки";
		КонецЕсли;
		ЗапросПредоплаты.Текст = ТекстЗапроса;
		ЗапросПредоплаты.УстановитьПараметр("МоментВремени", МоментВремени);
		ЗапросПредоплаты.УстановитьПараметр("Контрагент"   , Контрагент);
		ЗапросПредоплаты.УстановитьПараметр("Клиент"       , Клиент);
		ЗапросПредоплаты.УстановитьПараметр("Проект"       , Проект);
		РезультатЗапросаПредоплаты = ЗапросПредоплаты.Выполнить();
		Если НЕ РезультатЗапросаПредоплаты.Пустой() Тогда
			Возврат РезультатЗапросаПредоплаты;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Обработка проведения документа.
// ................................................................................
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.ВзаиморасчетыСКонтрагентами.Записывать = Истина;
	Движения.СостоянияПроектов.Записывать           = Истина;
	Движения.УП_РасчетыСКонтрагентами.Записывать    = Истина;
	Движения.УП_СостоянияПроектов.Записывать        = Истина;
	Движения.УП_ОбщиеСведенияПоПроектам.Записывать  = Истина;
	
	Для Каждого ТекСтрокаПроекты Из Проекты Цикл
		
		ПараметрыАналитики = Новый Структура();
		ПараметрыАналитики.Вставить("Контрагент", Контрагент);
		ПараметрыАналитики.Вставить("Клиент"    , ТекСтрокаПроекты.Клиент);
		ПараметрыАналитики.Вставить("Проект"    , ТекСтрокаПроекты.Проект);
		АналитикаУчетаПоКонтрагентам = УП_РаботаСДокументамиСервер.ЗначениеКлючаАналитики(ПараметрыАналитики);
		
		#Область ОбластьУстаревшегоКода
			Движение                      = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
			Движение.ВидДвижения          = ВидДвиженияНакопления.Приход;
			Движение.Период               = Дата;
			Движение.Контрагент           = Контрагент;
			Движение.ВалютаВзаиморасчетов = ТекСтрокаПроекты.Валюта;
			Движение.ВалютаУчета          = Константы.ВалютаУчета.Получить();
			Движение.Проект               = ТекСтрокаПроекты.Проект;
			Движение.СуммаВзаиморасчетов  = ТекСтрокаПроекты.Сумма;
			Движение.СуммаВВалютеУчета    = ТекСтрокаПроекты.Сумма*УП_ОбщегоНазначения_Сервер.ПолучитьАктуальныйКурсВалюты(Дата, ТекСтрокаПроекты.Валюта);
			
			Движение                   = Движения.СостоянияПроектов.Добавить();
			Движение.Период            = Дата;
			Движение.Контрагент        = Контрагент;
			Движение.Проект            = ТекСтрокаПроекты.Проект;
			Движение.Состояние         = Перечисления.СостоянияПроектов.Выполнен;
		#КонецОбласти
		
		Движение                              = Движения.УП_СостоянияПроектов.Добавить();
		Движение.Период                       = Дата;
		Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
		Движение.Состояние                    = Перечисления.СостоянияПроектов.Выполнен;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючиАналитикиУчетаПоКонтрагентам.Ссылка КАК АналитикаУчетаПоКонтрагентам,
		|	ЕСТЬNULL(УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) КАК ДолгКонтрагента,
		|	ЕСТЬNULL(УП_СтоимостьПроектовСрезПоследних.Сумма, 0) КАК СтоимостьПроектаПоПлану,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УП_СтоимостьПроектовСрезПоследних.Сумма, 0) <> 0
		|			ТОГДА ВЫБОР
		|					КОГДА УП_СтоимостьПроектовСрезПоследних.Сумма <= ВЫБОР
		|							КОГДА ЕСТЬNULL(УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) < 0
		|								ТОГДА ЕСТЬNULL(УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0) * -1
		|							ИНАЧЕ ЕСТЬNULL(УП_РасчетыСКонтрагентамиОстатки.СуммаОстаток, 0)
		|						КОНЕЦ
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплаченПолностью
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоКонтрагентам КАК КлючиАналитикиУчетаПоКонтрагентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УП_РасчетыСКонтрагентами.Остатки(&Дата, АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам) КАК УП_РасчетыСКонтрагентамиОстатки
		|		ПО КлючиАналитикиУчетаПоКонтрагентам.Ссылка = УП_РасчетыСКонтрагентамиОстатки.АналитикаУчетаПоКонтрагентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УП_СтоимостьПроектов.СрезПоследних(&Дата, АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам) КАК УП_СтоимостьПроектовСрезПоследних
		|		ПО КлючиАналитикиУчетаПоКонтрагентам.Ссылка = УП_СтоимостьПроектовСрезПоследних.АналитикаУчетаПоКонтрагентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО КлючиАналитикиУчетаПоКонтрагентам.Контрагент = ДоговорыКонтрагентов.Владелец
		|			И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|ГДЕ
		|	КлючиАналитикиУчетаПоКонтрагентам.Ссылка = &АналитикаУчетаПоКонтрагентам";
		Запрос.УстановитьПараметр("Дата"                        , Дата);
		Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.ОплаченПолностью Тогда
			Движение                              = Движения.УП_СостоянияПроектов.Добавить();
			Движение.Период                       = Дата + 1; // увеличиваем на 1 секунду, чтобы это считалось как другая запись
			Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
			Движение.Состояние                    = Перечисления.СостоянияПроектов.Закрыт;
		КонецЕсли;
		
		Движение                              = Движения.УП_РасчетыСКонтрагентами.Добавить();
		Движение.ВидДвижения                  = ВидДвиженияНакопления.Приход;
		Движение.Период                       = Дата;
		Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
		Движение.Валюта                       = ТекСтрокаПроекты.Валюта;
		// пока берем сумму для долга из табличной части документа
		Движение.Сумма                        = ТекСтрокаПроекты.Сумма;
		
		ОбщиеСведенияПоПроектам = РегистрыСведений.УП_ОбщиеСведенияПоПроектам.ПолучитьПоследнее(Дата, Новый Структура("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам));
		
		Движение                                   = Движения.УП_ОбщиеСведенияПоПроектам.Добавить();
		Движение.Период                            = Дата;
		Движение.АналитикаУчетаПоКонтрагентам      = АналитикаУчетаПоКонтрагентам;
		Движение.РуководительПроекта               = ОбщиеСведенияПоПроектам.РуководительПроекта;
		Движение.ВыполнитьДо                       = ОбщиеСведенияПоПроектам.ВыполнитьДо;
		Движение.ДатаПолученияАктаВыполненныхРабот = ДатаПолученияАктаОтЗаказчика;
	КонецЦикла;
	
	Движения.УП_ИсполнителиПроектов_Факт.Записывать = Истина;
	Движения.УП_РасчетыСИсполнителями.Записывать = Истина;
	Движения.УП_СостоянияПроектовИсполнителей.Записывать = Истина;
	Для Каждого ТекСтрокаИсполнители Из Исполнители Цикл
		ПараметрыАналитики = Новый Структура();
		ПараметрыАналитики.Вставить("Контрагент", Контрагент);
		ПараметрыАналитики.Вставить("Клиент"    , ТекСтрокаИсполнители.Клиент);
		ПараметрыАналитики.Вставить("Проект"    , ТекСтрокаИсполнители.Проект);
		АналитикаУчетаПоКонтрагентам = УП_РаботаСДокументамиСервер.ЗначениеКлючаАналитики(ПараметрыАналитики);
		
		Движение = Движения.УП_ИсполнителиПроектов_Факт.Добавить();
		Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
		Движение.Исполнитель                  = ТекСтрокаИсполнители.Исполнитель;
		Движение.ВремяВыполнения              = УП_ОбщегоНазначения_Сервер.ПреобразоватьВремя(ТекСтрокаИсполнители.ВремяВыполнения);
		Движение.Сумма                        = ТекСтрокаИсполнители.Сумма;
		
		Движение                              = Движения.УП_РасчетыСИсполнителями.Добавить();
		Движение.ВидДвижения                  = ВидДвиженияНакопления.Приход;
		Движение.Период                       = Дата;
		Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
		Движение.Исполнитель                  = ТекСтрокаИсполнители.Исполнитель;
		Движение.Сумма                        = ТекСтрокаИсполнители.Сумма;
		
		Движение                              = Движения.УП_СостоянияПроектовИсполнителей.Добавить();
		Движение.Период                       = Дата;
		Движение.Исполнитель                  = ТекСтрокаИсполнители.Исполнитель;
		Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
		Движение.Состояние                    = Перечисления.СостоянияПроектов.Выполнен;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючиАналитикиУчетаПоКонтрагентам.Ссылка КАК АналитикаУчетаПоКонтрагентам,
		|	ЕСТЬNULL(УП_РасчетыСИсполнителямиОстатки.СуммаОстаток, 0) КАК ДолгКонтрагента,
		|	ЕСТЬNULL(УП_ИсполнителиПроектов.Сумма, 0) КАК СтоимостьПроектаПоПлану,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УП_ИсполнителиПроектов.Сумма, 0) <> 0
		|			ТОГДА ВЫБОР
		|					КОГДА УП_ИсполнителиПроектов.Сумма <= ВЫБОР
		|							КОГДА ЕСТЬNULL(УП_РасчетыСИсполнителямиОстатки.СуммаОстаток, 0) < 0
		|								ТОГДА ЕСТЬNULL(УП_РасчетыСИсполнителямиОстатки.СуммаОстаток, 0) * -1
		|							ИНАЧЕ ЕСТЬNULL(УП_РасчетыСИсполнителямиОстатки.СуммаОстаток, 0)
		|						КОНЕЦ
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОплаченПолностью
		|ИЗ
		|	Справочник.КлючиАналитикиУчетаПоКонтрагентам КАК КлючиАналитикиУчетаПоКонтрагентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УП_РасчетыСИсполнителями.Остатки(
		|				&Дата,
		|				АналитикаУчетаПоКонтрагентам = &АналитикаУчетаПоКонтрагентам
		|					И Исполнитель = &Исполнитель) КАК УП_РасчетыСИсполнителямиОстатки
		|		ПО КлючиАналитикиУчетаПоКонтрагентам.Ссылка = УП_РасчетыСИсполнителямиОстатки.АналитикаУчетаПоКонтрагентам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УП_ИсполнителиПроектов КАК УП_ИсполнителиПроектов
		|		ПО КлючиАналитикиУчетаПоКонтрагентам.Ссылка = УП_ИсполнителиПроектов.АналитикаУчетаПоКонтрагентам
		|			И (УП_ИсполнителиПроектов.Исполнитель = &Исполнитель)
		|ГДЕ
		|	КлючиАналитикиУчетаПоКонтрагентам.Ссылка = &АналитикаУчетаПоКонтрагентам";
		Запрос.УстановитьПараметр("Дата"                        , Дата);
		Запрос.УстановитьПараметр("АналитикаУчетаПоКонтрагентам", АналитикаУчетаПоКонтрагентам);
		Запрос.УстановитьПараметр("Исполнитель"                 , ТекСтрокаИсполнители.Исполнитель);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.ОплаченПолностью Тогда
			Движение                              = Движения.УП_СостоянияПроектов.Добавить();
			Движение.Период                       = Дата + 1; // увеличиваем на 1 секунду, чтобы это считалось как другая запись
			Движение.Исполнитель                  = ТекСтрокаИсполнители.Исполнитель;
			Движение.АналитикаУчетаПоКонтрагентам = АналитикаУчетаПоКонтрагентам;
			Движение.Состояние                    = Перечисления.СостоянияПроектов.Закрыт;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры