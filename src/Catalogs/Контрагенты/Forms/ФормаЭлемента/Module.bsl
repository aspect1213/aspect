#Область ПрочиеОбработчикиСобытий

&НаСервере
Функция ПолучитьСтоимостьЧаса_Сервер()
	
	мСтоимостьЧасаРаботы = 0;
	ЗапросСтоимостиЧасаРаботы = Новый Запрос;
	ЗапросСтоимостиЧасаРаботы.Текст =
	"ВЫБРАТЬ
	|	СтоимостьЗаЧасРаботыСрезПоследних.ЦенаЗаЧасРаботы
	|ИЗ
	|	РегистрСведений.СтоимостьЗаЧасРаботы.СрезПоследних(&ТекущаяДата, Контрагент = &Контрагент) КАК СтоимостьЗаЧасРаботыСрезПоследних";
	ЗапросСтоимостиЧасаРаботы.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ЗапросСтоимостиЧасаРаботы.УстановитьПараметр("Контрагент" , Объект.Ссылка);
	РезультатЗапроса = ЗапросСтоимостиЧасаРаботы.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		мСтоимостьЧасаРаботы = ВыборкаЗапроса.ЦенаЗаЧасРаботы;
	КонецЕсли;
	Возврат мСтоимостьЧасаРаботы;
	
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере()
	
	Если НЕ СтоимостьЗаЧасРаботы = ПолучитьСтоимостьЧаса_Сервер() Тогда
		ЭлементМенеджераЗаписи                 = РегистрыСведений.СтоимостьЗаЧасРаботы.СоздатьМенеджерЗаписи();
		ЭлементМенеджераЗаписи.Период          = ТекущаяДата();
		ЭлементМенеджераЗаписи.Контрагент      = Объект.Ссылка;
		ЭлементМенеджераЗаписи.ЦенаЗаЧасРаботы = СтоимостьЗаЧасРаботы;
		Попытка
			ЭлементМенеджераЗаписи.Записать();
		Исключение
			Сообщить("ОШИБКА!!! " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДоговорКонтрагентаНаСервере()
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ЗапросДоговора = Новый Запрос;
	ЗапросДоговора.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И &ТекущаяДата МЕЖДУ ДоговорыКонтрагентов.ДатаНачала И ДоговорыКонтрагентов.ДатаОкончания
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросДоговора.УстановитьПараметр("Владелец"   , Объект.Ссылка);
	ЗапросДоговора.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	РезультатЗапросаДоговора = ЗапросДоговора.Выполнить();
	Если НЕ РезультатЗапросаДоговора.Пустой() Тогда
		ВыборкаЗапросаДоговора = РезультатЗапросаДоговора.Выбрать();
		ВыборкаЗапросаДоговора.Следующий();
		Договор = ВыборкаЗапросаДоговора.Ссылка;
	КонецЕсли;
	Возврат Договор;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура УправлениеВидимостьюСтраницПанели()
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Элементы.СтраницаФизическоеЛицо.Видимость = Истина;
		Элементы.СтраницаОсновные.Видимость       = Ложь;
	ИначеЕсли Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Элементы.СтраницаФизическоеЛицо.Видимость = Ложь;
		Элементы.СтраницаОсновные.Видимость       = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация",, ИсключаемыеВиды, Истина);
	
	//КонтактнаяИнформацияПриСменеСтраницы();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ДоговорКонтрагента = ПолучитьДоговорКонтрагентаНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтоимостьЗаЧасРаботы = ПолучитьСтоимостьЧаса_Сервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ПараметрыЗаписи.Вставить("СоздатьКлиента", Истина);
	Иначе
		ПараметрыЗаписи.Вставить("СоздатьКлиента", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.СоздатьКлиента Тогда
		НовыйКлиент              = Справочники.Клиенты.СоздатьЭлемент();
		НовыйКлиент.Владелец     = ТекущийОбъект.Ссылка;
		НовыйКлиент.Контрагент   = ТекущийОбъект.Ссылка;
		НовыйКлиент.Наименование = Строка(ТекущийОбъект.Ссылка);
		НовыйКлиент.Основной     = Истина;
		Попытка
			НовыйКлиент.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюСтраницПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОповеститьОбИзменении(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)
	
	ЭтоЮридическоеЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
	Если НЕ ЭтоЮридическоеЛицо Тогда
		Объект.КПП = "";
	КонецЕсли;
	УправлениеВидимостьюСтраницПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ЭтотОбъект.ПараметрыКонтактнойИнформации.ГруппаДляРазмещения
		И Не ЭтотОбъект.ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоИностранныйКонтрагентПриИзменении(Элемент)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеПолное = "";
	Если ВРег(Лев(Объект.Наименование, 3)) = ВРег("ООО") Тогда
		НаименованиеПолное = "Общество с ограниченной ответственностью " + СокрЛП(Прав(Объект.Наименование, СтрДлина(Объект.Наименование) - 3));
	ИначеЕсли ВРег(Лев(Объект.Наименование, 2)) = ВРег("ИП") Тогда
		НаименованиеПолное = "Индивидуальный предприниматель " + СокрЛП(Прав(Объект.Наименование, СтрДлина(Объект.Наименование) - 2));
	ИначеЕсли ВРег(Лев(Объект.Наименование, 3)) = ВРег("ОАО") Тогда
		НаименованиеПолное = "Открытое акционерное общество " + СокрЛП(Прав(Объект.Наименование, СтрДлина(Объект.Наименование) - 3));
	ИначеЕсли ВРег(Лев(Объект.Наименование, 3)) = ВРег("ЗАО") Тогда
		НаименованиеПолное = "Закрытое акционерное общество " + СокрЛП(Прав(Объект.Наименование, СтрДлина(Объект.Наименование) - 3));
	КонецЕсли;
	Объект.НаименованиеПолное = НаименованиеПолное;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти