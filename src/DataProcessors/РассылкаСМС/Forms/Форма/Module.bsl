// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Знач Строка) Экспорт
	
	a = ЧислоВБинарныйМассив(1732584193); // 01 23 45 67; (шестнадцатеричное представление, сначала младший байт)
	b = ЧислоВБинарныйМассив(4023233417); // 89 AB CD EF;
	c = ЧислоВБинарныйМассив(2562383102); // FE DC BA 98;
	d = ЧислоВБинарныйМассив(271733878);  // 76 54 32 10;
	
	X = Новый Массив(16); // X - блок данных размером 512 бит, массив из 32-битных слов
	
	// разбиваем строку на блоки по 512 бит
	МассивБлоковИзСтроки = ПолучитьМассивБлоковБайтовИзСтроки(Строка);
	
	// для каждого блока производим расчет
	Для НомерБлока = 0 По МассивБлоковИзСтроки.Количество() - 1 Цикл 
		Блок = МассивБлоковИзСтроки[НомерБлока];
		Для НомерСлова = 0 по 15 Цикл
			Слово = 0;
			Для НомерБайта = 1 По 4 Цикл
				Слово = Слово + Блок[НомерСлова * 4 + НомерБайта - 1] * Pow(256, НомерБайта - 1);
			КонецЦикла;
			X[НомерСлова] = Слово; 
		КонецЦикла;
		
		// в последний блок дописываем длину строки в битах
		Если НомерБлока = МассивБлоковИзСтроки.Количество() - 1 Тогда
			РазмерСтрокиВБитах = СтрДлина(Строка) * 8;
			X[14] = РазмерСтрокиВБитах % Pow(2,32); // сначала младшие 4 байта
			X[15] = Цел(РазмерСтрокиВБитах / Pow(2,32)) % Pow(2,64); // если длина превосходит (2^64 − 1) бит, то старшие биты откидываем
		КонецЕсли;
		РассчитатьБлок(a, b, c, d, X);
	КонецЦикла;
	
	Результат = ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(a))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(b))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(c))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(d));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБлоковБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Строка = Строка + Символ(128); // единичный бит + выравнивание нолями до байта
	Пока СтрДлина(Строка) > 0 Цикл
		БлокБайтов = ПолучитьБлокБайтовИзСтроки(Лев(Строка, 64));
		Результат.Добавить(БлокБайтов);
		
		// если последние 8 байт получились не нулевые, то добавляем ещё один нулевой блок
		Если СтрДлина(Строка) > 56 и СтрДлина(Строка) < 64 Тогда
			Результат.Добавить(ПолучитьБлокБайтовИзСтроки(""));
		КонецЕсли;
		
		Строка = Сред(Строка, 65);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьБлокБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(КодСимвола(Сред(Строка, Позиция, 1)));
	КонецЦикла;
	
	// дополняем блок нолями
	Для Индекс = Позиция По 64 Цикл
		Результат.Добавить(0);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура РассчитатьБлок(a, b, c, d, X)
	aa = СкопироватьМассив(a);
	bb = СкопироватьМассив(b);
	cc = СкопироватьМассив(c);
	dd = СкопироватьМассив(d);
	
	// раунд 1
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 0],  7, 3614090360); // 0xd76aa478 /* 1 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 1], 12, 3905402710); // 0xe8c7b756 /* 2 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 2], 17,  606105819); // 0x242070db /* 3 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 3], 22, 3250441966); // 0xc1bdceee /* 4 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 4],  7, 4118548399); // 0xf57c0faf /* 5 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 5], 12, 1200080426); // 0x4787c62a /* 6 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 6], 17, 2821735955); // 0xa8304613 /* 7 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 7], 22, 4249261313); // 0xfd469501 /* 8 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 8],  7, 1770035416); // 0x698098d8 /* 9 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 9], 12, 2336552879); // 0x8b44f7af /* 10 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[10], 17, 4294925233); // 0xffff5bb1 /* 11 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[11], 22, 2304563134); // 0x895cd7be /* 12 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[12],  7, 1804603682); // 0x6b901122 /* 13 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[13], 12, 4254626195); // 0xfd987193 /* 14 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[14], 17, 2792965006); // 0xa679438e /* 15 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[15], 22, 1236535329); // 0x49b40821 /* 16 */
	
	// раунд 2
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 1],  5, 4129170786); // 0xf61e2562 /* 17 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 6],  9, 3225465664); // 0xc040b340 /* 18 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[11], 14,  643717713); // 0x265e5a51 /* 19 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 0], 20, 3921069994); // 0xe9b6c7aa /* 20 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 5],  5, 3593408605); // 0xd62f105d /* 21 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[10],  9,   38016083); //  0x2441453 /* 22 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[15], 14, 3634488961); // 0xd8a1e681 /* 23 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 4], 20, 3889429448); // 0xe7d3fbc8 /* 24 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 9],  5,  568446438); // 0x21e1cde6 /* 25 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[14],  9, 3275163606); // 0xc33707d6 /* 26 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 3], 14, 4107603335); // 0xf4d50d87 /* 27 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 8], 20, 1163531501); // 0x455a14ed /* 28 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[13],  5, 2850285829); // 0xa9e3e905 /* 29 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 2],  9, 4243563512); // 0xfcefa3f8 /* 30 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 7], 14, 1735328473); // 0x676f02d9 /* 31 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[12], 20, 2368359562); // 0x8d2a4c8a /* 32 */
	
	// раунд 3
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 5],  4, 4294588738); // 0xfffa3942 /* 33 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 8], 11, 2272392833); // 0x8771f681 /* 34 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[11], 16, 1839030562); // 0x6d9d6122 /* 35 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[14], 23, 4259657740); // 0xfde5380c /* 36 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 1],  4, 2763975236); // 0xa4beea44 /* 37 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 4], 11, 1272893353); // 0x4bdecfa9 /* 38 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 7], 16, 4139469664); // 0xf6bb4b60 /* 39 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[10], 23, 3200236656); // 0xbebfbc70 /* 40 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[13],  4,  681279174); // 0x289b7ec6 /* 41 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 0], 11, 3936430074); // 0xeaa127fa /* 42 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 3], 16, 3572445317); // 0xd4ef3085 /* 43 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 6], 23,   76029189); //  0x4881d05 /* 44 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 9],  4, 3654602809); // 0xd9d4d039 /* 45 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[12], 11, 3873151461); // 0xe6db99e5 /* 46 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[15], 16,  530742520); // 0x1fa27cf8 /* 47 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 2], 23, 3299628645); // 0xc4ac5665 /* 48 */
	
	// раунд 4
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 0],  6, 4096336452); // 0xf4292244 /* 49 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 7], 10, 1126891415); // 0x432aff97 /* 50 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[14], 15, 2878612391); // 0xab9423a7 /* 51 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 5], 21, 4237533241); // 0xfc93a039 /* 52 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[12],  6, 1700485571); // 0x655b59c3 /* 53 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 3], 10, 2399980690); // 0x8f0ccc92 /* 54 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[10], 15, 4293915773); // 0xffeff47d /* 55 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 1], 21, 2240044497); // 0x85845dd1 /* 56 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 8],  6, 1873313359); // 0x6fa87e4f /* 57 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[15], 10, 4264355552); // 0xfe2ce6e0 /* 58 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 6], 15, 2734768916); // 0xa3014314 /* 59 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[13], 21, 1309151649); // 0x4e0811a1 /* 60 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 4],  6, 4149444226); // 0xf7537e82 /* 61 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[11], 10, 3174756917); // 0xbd3af235 /* 62 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 2], 15,  718787259); // 0x2ad7d2bb /* 63 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 9], 21, 3951481745); // 0xeb86d391 /* 64 */
	
	a = БинарнаяСумма(a, aa);
	b = БинарнаяСумма(b, bb);
	c = БинарнаяСумма(c, cc);
	d = БинарнаяСумма(d, dd);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейF(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, c), ПобитовоеИ(ПобитовоеНе(b), d)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейG(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, d), ПобитовоеИ(ПобитовоеНе(d), c)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейH(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИсключающееИли(b, c), d), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейI(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИли(ПобитовоеНе(d), b), c), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперацию(q, a, b, X, s, t)
	a = БинарнаяСумма(ЦиклическийСдвигВлево(БинарнаяСумма(БинарнаяСумма(a, q), ЧислоВБинарныйМассив((X + t) % Pow(2,32))), s), b);
КонецПроцедуры

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 4)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИсключающееИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеНе(БинарныйМассив)
	Результат = Новый Массив;
	Для Каждого Элемент Из БинарныйМассив Цикл
		Результат.Добавить(Не Элемент);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ЦиклическийСдвигВлево(БинарныйМассив, КоличествоРазрядов)
	Результат = Новый Массив(БинарныйМассив.Количество());
	Для Разряд = 0 По БинарныйМассив.Количество()-1 Цикл
		Результат[(Разряд + КоличествоРазрядов) % БинарныйМассив.Количество()] = БинарныйМассив[Разряд];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарнаяСумма(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	ДобавитьКРазряду = Ложь;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс] <> ДобавитьКРазряду);
		ДобавитьКРазряду = (0 + БинарныйМассив1[Индекс] + БинарныйМассив2[Индекс] + ДобавитьКРазряду) > 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СкопироватьМассив(Массив)
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

 // Преобразовать строку в UTF-8
Функция ПреобразоватьСтрокуВУТФ8(Стр) Экспорт
    Длина=СтрДлина(Стр);
    Итог="";
    Для Н=1 По Длина Цикл
        Знак=Сред(Стр,Н,1);
        Код=КодСимвола(Знак);
        Если Код<128 Тогда
            Итог=Итог+Знак;
        Иначе
            Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
                Итог=Итог+Символ(208)+Символ(144+Код-КодСимвола("А"));
            ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
                Итог=Итог+Символ(209)+Символ(128+Код-КодСимвола("р"));
            ИначеЕсли (Знак="ё") Тогда
                Итог=Итог+Символ(209)+Символ(145);
            ИначеЕсли (Знак="Ё") Тогда
                Итог=Итог+Символ(208)+Символ(129);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    Возврат Итог;
КонецФункции

&НаСервере
Процедура ОбновитьБалансНаСервре()
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".txt");
	
	// Получаем токен
	Отправка=Новый HTTPСоединение("sms.ru",,,,);
	Отправка.Получить("http://sms.ru/auth/get_token", ВременныйФайл);
	Ответ = Новый ЧтениеТекста(ВременныйФайл);
	Токен = Ответ.ПрочитатьСтроку();
	Ответ.Закрыть();
	
	// Получаем баланс	
	МД5 = НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(ПреобразоватьСтрокуВУТФ8(Пароль) + Токен));
			
	Отправка=Новый HTTPСоединение("sms.ru",,,,);		
	Отправка.Получить(
		"http://sms.ru/my/balance?" +
		"&login=" + Логин + 
		"&token=" + Токен +
		"&sig=" + МД5,
		ВременныйФайл
	);		
	
	Ответ = Новый ЧтениеТекста(ВременныйФайл);
	ПерваяСтрока = Ответ.ПрочитатьСтроку();
	БалансЧисло = 0;
	Если ПерваяСтрока = "100" Тогда
		БалансЧисло = Число(СокрЛП(Ответ.ПрочитатьСтроку()));
		Баланс = Строка(БалансЧисло) + " руб.";
		Элементы.Баланс.ЦветТекста = Новый Цвет(51, 102, 255);
	ИначеЕсли ПерваяСтрока = "200" Тогда
		Баланс = "Неправильный api_id (СМС Ключ)";
	ИначеЕсли ПерваяСтрока = "200" Тогда
		Баланс = "Неправильный api_id (СМС Ключ)";
	ИначеЕсли ПерваяСтрока = "210" Тогда
		Баланс = "Используется GET, где необходимо использовать POST";
	ИначеЕсли ПерваяСтрока = "211" Тогда
		Баланс = "Метод не найден";
	ИначеЕсли ПерваяСтрока = "220" Тогда
		Баланс = "Сервис временно недоступен, попробуйте чуть позже";
	ИначеЕсли ПерваяСтрока = "300" Тогда
		Баланс = "Неправильный token (возможно истек срок действия, либо ваш IP изменился)";
	ИначеЕсли ПерваяСтрока = "301" Тогда
		Баланс = "Неправильный пароль, либо пользователь не найден";
	ИначеЕсли ПерваяСтрока = "302" Тогда
		Баланс = "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)";
	Иначе
		Баланс = "Невыясненная ошибка получения баланса";
	КонецЕсли;
	Ответ.Закрыть();
	
	Если БалансЧисло <= 0 Тогда
		Элементы.Баланс.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;	
	
	Файл = Новый Файл(ВременныйФайл);
	ИмяВременногоФайла = Файл.Имя;
	КаталогВременногоФайла = Файл.Путь;	
	УдалитьФайлы(КаталогВременногоФайла, ИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБаланс(Команда)
	ОбновитьБалансНаСервре();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьПриведенныйНомер(Номер)	
	Результат = "";
	Для Индекс = 1 По СтрДлина(Номер) Цикл
		Если Найти("0123456789", Сред(Номер, Индекс, 1)) > 0 Тогда
			Результат = Результат + Сред(Номер, Индекс, 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура Заполнить(МассивСправочников)
	
	ТЗ.Очистить();
	
	Для Каждого Элемент Из МассивСправочников Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ИСТИНА КАК Флаг,
			|	ПартнерыКонтактнаяИнформация.Ссылка КАК Контрагент,
			|	&ТипЗначенияОбъекта КАК ТипЗначенияОбъекта,
			|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК Телефон
			|ИЗ
			|	Справочник." + Элемент + ".КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ
			|	ПартнерыКонтактнаяИнформация.НомерТелефона <> """""
		);
			//" + Элемент + "	
		Запрос.УстановитьПараметр("ТипЗначенияОбъекта", Метаданные.Справочники[Элемент].Синоним);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Контрагент = Выборка.Контрагент;
			Телефоны = СокрЛП(Выборка.Телефон);
					
			Если НЕ ПустаяСтрока(Телефоны) Тогда
				
				// Получаем список телефонов
				СЗ = Новый СписокЗначений;
				Номер = "";
				Для Индекс = 1 По СтрДлина(Телефоны) Цикл
					Если Найти("+-() 0123456789", Сред(Телефоны, Индекс, 1)) > 0 Тогда
						Номер = Номер + Сред(Телефоны, Индекс, 1);
					Иначе					
						Если СтрДлина(Номер) >= 10 Тогда
							ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
							Если Лев(ПриведенныйНомер, 2) = "89" ИЛИ Лев(ПриведенныйНомер, 1) = "9" ИЛИ Лев(ПриведенныйНомер, 2) = "79" Тогда
								СЗ.Добавить(СокрЛП(ПриведенныйНомер));
							КонецЕсли;
							Номер = "";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если СтрДлина(Номер) >= 10 Тогда
					ПриведенныйНомер = ПолучитьПриведенныйНомер(Номер);						
					Если Лев(ПриведенныйНомер, 2) = "89" ИЛИ Лев(ПриведенныйНомер, 1) = "9" ИЛИ Лев(ПриведенныйНомер, 2) = "79" Тогда
						СЗ.Добавить(СокрЛП(ПриведенныйНомер));
					КонецЕсли;
				КонецЕсли;
				
				Для Индекс = 0 По СЗ.Количество() - 1 Цикл
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.Флаг		= Истина;
					НоваяСтрока.ТипЗначенияОбъекта = Выборка.ТипЗначенияОбъекта;
					Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						НоваяСтрока.Контрагент	= Строка(Контрагент) + " (" + Строка(Контрагент.ОбъектВладелец) + ")";
					Иначе
						НоваяСтрока.Контрагент	= Контрагент;
					КонецЕсли;
					
					НоваяСтрока.Телефон		= СЗ.Получить(Индекс);
					НоваяСтрока.Статус		= "Не отправлено";			
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ТЗ.Сортировать("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоВсемКонтактнымДанным(Команда)	
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Контрагенты");
	МассивСправочников.Добавить("КонтактныеЛица");
	МассивСправочников.Добавить("ФизическиеЛица");
	Заполнить(МассивСправочников);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоКонтрагентам(Команда)
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("Контрагенты");
	МассивСправочников.Добавить("КонтактныеЛица");
	Заполнить(МассивСправочников);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПоФизическимЛицам(Команда)
	МассивСправочников = Новый Массив();
	МассивСправочников.Добавить("ФизическиеЛица");
	Заполнить(МассивСправочников);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	Для Каждого Строки ИЗ ТЗ Цикл
		Строки.Флаг = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого Строки ИЗ ТЗ Цикл
		Строки.Флаг = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПосчитатьСтоимостьОтправкиНаСервере()
	Сумма = 0;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".txt");
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			Получатель = Стр.Телефон;
			
			// Получаем токен
			Отправка=Новый HTTPСоединение("sms.ru",,,,);
			Отправка.Получить("http://sms.ru/auth/get_token", ВременныйФайл);
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			Токен = Ответ.ПрочитатьСтроку();
			Ответ.Закрыть();
			
			МД5 = НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(ПреобразоватьСтрокуВУТФ8(Пароль) + Токен));
					
			Отправка=Новый HTTPСоединение("sms.ru",,,,);		
			Отправка.Получить(
				"http://sms.ru/sms/cost?to=" + Строка(Стр.Телефон) + "&text=" + Строка(ТекстСМС) + "&login=" + Логин + "&token=" + Токен + "&sig=" + МД5,
				ВременныйФайл
			);		
			
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			ПерваяСтрока = Ответ.ПрочитатьСтроку();
			Если ПерваяСтрока="100" Тогда
				Сумма = Сумма + Число(Ответ.ПрочитатьСтроку());
			ИначеЕсли ПерваяСтрока="200" Тогда			
				Сообщить("Строка №" + Получатель + " неправильный api_id (СМС Ключ)");
			ИначеЕсли ПерваяСтрока="202" Тогда
				Сообщить("Строка №" + Получатель + " неправильно указан получатель");
			ИначеЕсли ПерваяСтрока="207" Тогда
				Сообщить("Строка №" + Получатель + " на этот номер нельзя отправлять сообщения");
			ИначеЕсли ПерваяСтрока="210" Тогда
				Сообщить("Строка №" + Получатель + " используется GET, где необходимо использовать POST");
			ИначеЕсли ПерваяСтрока="211" Тогда
				Сообщить("Строка №" + Получатель + " Метод не найден");
			ИначеЕсли ПерваяСтрока="220" Тогда
				Сообщить("Строка №" + Получатель + " Сервис временно недоступен, попробуйте чуть позже.");
			ИначеЕсли ПерваяСтрока="300" Тогда
				Сообщить("Строка №" + Получатель + " неправильный token (возможно истек срок действия, либо ваш IP изменился)");
			ИначеЕсли ПерваяСтрока="301" Тогда
				Сообщить("Строка №" + Получатель + " неправильный пароль, либо пользователь не найден");
			ИначеЕсли ПерваяСтрока="302" Тогда
				Сообщить("Строка №" + Получатель + " Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)");
			Иначе
				Сообщить("Строка №" + Получатель + " Неизвестная ошибка отправки СМС (" + ПерваяСтрока + ")");
			КонецЕсли;
			Ответ.Закрыть();
		КонецЕсли;
	КонецЦикла;
	
	Файл = Новый Файл(ВременныйФайл);
	ИмяВременногоФайла = Файл.Имя;
	КаталогВременногоФайла = Файл.Путь;	
	УдалитьФайлы(КаталогВременногоФайла, ИмяВременногоФайла);
	
	Возврат Сумма;
	
КонецФункции

&НаКлиенте
Процедура ПосчитатьСтоимостьОтправки(Команда)
	Если Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" Тогда
		Предупреждение("Отправив SMS на выбранные телефонные номера,
					|Вы потратите " + Формат(ПосчитатьСтоимостьОтправкиНаСервере(), "ЧДЦ=2; ЧН=0,00") + " руб.");	
	Иначе
		Выполнить("ПоказатьПредупреждение(,""Отправив SMS на выбранные телефонные номера, " + 
					"Вы потратите "" + Формат(ПосчитатьСтоимостьОтправкиНаСервере(), ""ЧДЦ=2; ЧН=0,00"") + "" руб."")");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтправитьСМСНаСервере()
	ВременныйФайл = ПолучитьИмяВременногоФайла(".txt");
	
	Для каждого Стр Из ТЗ Цикл		
		Если Стр.Флаг Тогда
			Получатель = Стр.Телефон;
			
			// Получаем токен
			Отправка=Новый HTTPСоединение("sms.ru",,,,);
			Отправка.Получить("http://sms.ru/auth/get_token", ВременныйФайл);
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			Токен = Ответ.ПрочитатьСтроку();
			Ответ.Закрыть();
			
			МД5 = НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(ПреобразоватьСтрокуВУТФ8(Пароль) + Токен));
					
			Отправка=Новый HTTPСоединение("sms.ru",,,,);		
			Отправка.Получить(
				"http://sms.ru/sms/send?to=" + Строка(Стр.Телефон) + "&text=" + Строка(ТекстСМС) + ?(ПустаяСтрока(Отправитель), "", "&from=" + Отправитель) + "&login=" + Логин + "&partner_id=12737" + "&token=" + Токен + "&sig=" + МД5,
				ВременныйФайл
			);		
			
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			ПерваяСтрока = Ответ.ПрочитатьСтроку();
			Если ПерваяСтрока="100" Тогда
				Стр.ИДСообщения = Ответ.ПрочитатьСтроку();
				Стр.Статус = "Отправка";
			ИначеЕсли ПерваяСтрока="200" Тогда			
				Стр.Статус = "Неправильный api_id (СМС Ключ)";
			ИначеЕсли ПерваяСтрока="201" Тогда
				Стр.Статус = "Не хватает средств на лицевом счету";
			ИначеЕсли ПерваяСтрока="202" Тогда
				Стр.Статус = "Неправильно указан получатель";
			ИначеЕсли ПерваяСтрока="203" Тогда
				Стр.Статус = "Нет текста сообщения";
			ИначеЕсли ПерваяСтрока="204" Тогда
				Стр.Статус = "Имя отправителя не согласовано с администрацией (sms.ru)";
			ИначеЕсли ПерваяСтрока="205" Тогда
				Стр.Статус = "Сообщение слишком длинное (превышает 5 СМС)";
			ИначеЕсли ПерваяСтрока="206" Тогда
				Стр.Статус = "Превышен дневной лимит на отправку сообщений";
			ИначеЕсли ПерваяСтрока="207" Тогда
				Стр.Статус = "На этот номер нельзя отправлять сообщения";
			ИначеЕсли ПерваяСтрока="208" Тогда
				Стр.Статус = "Параметр time указан неправильно";
			ИначеЕсли ПерваяСтрока="209" Тогда
				Стр.Статус = "Вы добавили этот номер в стоп-лист";
			ИначеЕсли ПерваяСтрока="210" Тогда
				Стр.Статус = "Используется GET, где необходимо использовать POST";
			ИначеЕсли ПерваяСтрока="211" Тогда
				Стр.Статус = "Метод не найден";
			ИначеЕсли ПерваяСтрока="220" Тогда
				Стр.Статус = "Сервис временно недоступен, попробуйте чуть позже.";
			ИначеЕсли ПерваяСтрока="230" Тогда
				Стр.Статус = "Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 250 сообщений.";
			ИначеЕсли ПерваяСтрока="300" Тогда
				Стр.Статус = "Неправильный token (возможно истек срок действия, либо ваш IP изменился)";
			ИначеЕсли ПерваяСтрока="301" Тогда
				Стр.Статус = "Неправильный пароль, либо пользователь не найден";
			ИначеЕсли ПерваяСтрока="302" Тогда
				Стр.Статус = "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)";
			Иначе
				Стр.Статус = "Неизвестная ошибка отправки СМС (" + ПерваяСтрока + ")";
			КонецЕсли;
			Ответ.Закрыть();
		КонецЕсли;
	КонецЦикла;
	
	Файл = Новый Файл(ВременныйФайл);
	ИмяВременногоФайла = Файл.Имя;
	КаталогВременногоФайла = Файл.Путь;	
	УдалитьФайлы(КаталогВременногоФайла, ИмяВременногоФайла);
	
	ОбновитьБалансНаСервре();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьSMS(Команда)
	ОтправитьСМСНаСервере();
КонецПроцедуры

Процедура ОбновитьСтатусДоставкиНаСервере()
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".txt");
	
	Для каждого Стр Из ТЗ Цикл
		
		Если ПустаяСтрока(Стр.ИДСообщения) ИЛИ НЕ Стр.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем токен
		Отправка=Новый HTTPСоединение("sms.ru",,,,);
		Отправка.Получить("http://sms.ru/auth/get_token", ВременныйФайл);
		Ответ = Новый ЧтениеТекста(ВременныйФайл);
		Токен = Ответ.ПрочитатьСтроку();
		Ответ.Закрыть();
			
		МД5 = НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(ПреобразоватьСтрокуВУТФ8(Пароль) + Токен));
		
		Получатель = Стр.Телефон;
		ИД = Стр.ИДСообщения;		
		
		Отправка=Новый HTTPСоединение("sms.ru",,,,);		
		Отправка.Получить(
		"http://sms.ru/sms/status?login=" +	Логин + 
		"&token=" + Токен + 
		"&sig=" + МД5 +
		"&id=" + Строка(ИД),
		ВременныйФайл);
		
		Ответ = Новый ЧтениеТекста(ВременныйФайл);
		ПерваяСтрока = Ответ.ПрочитатьСтроку();		
		Если ПерваяСтрока="103" Тогда
			Стр.Статус = "Доставлено";
		ИначеЕсли ПерваяСтрока="-1" Тогда
			Стр.Статус = "Ошибка, сообщение не найдено.";
		ИначеЕсли ПерваяСтрока="100" Тогда
			Стр.Статус = "Сообщение находится в очереди";
		ИначеЕсли ПерваяСтрока="101" Тогда
			Стр.Статус = "Сообщение передается оператору";
		ИначеЕсли ПерваяСтрока="102" Тогда
			Стр.Статус = "Сообщение отправлено (в пути)";
		ИначеЕсли ПерваяСтрока="104" Тогда
			Стр.Статус = "Ошибка, не может быть доставлено: время жизни истекло";
		ИначеЕсли ПерваяСтрока="105" Тогда
			Стр.Статус = "Ошибка, не может быть доставлено: удалено оператором";
		ИначеЕсли ПерваяСтрока="106" Тогда
			Стр.Статус = "Ошибка, не может быть доставлено: сбой в телефоне";
		ИначеЕсли ПерваяСтрока="107" Тогда
			Стр.Статус = "Ошибка, не может быть доставлено: неизвестная причина";
		ИначеЕсли ПерваяСтрока="108" Тогда
			Стр.Статус = "Ошибка, не может быть доставлено: отклонено";
		ИначеЕсли ПерваяСтрока="200" Тогда
			Стр.Статус = "Ошибка, неправильный api_id";
		ИначеЕсли ПерваяСтрока="210" Тогда
			Стр.Статус = "Ошибка, используется GET, где необходимо использовать POST";
		ИначеЕсли ПерваяСтрока="211" Тогда
			Стр.Статус = "Ошибка, метод не найден";
		ИначеЕсли ПерваяСтрока="220" Тогда
			Стр.Статус = "Ошибка, сервис временно недоступен, попробуйте чуть позже.";
		ИначеЕсли ПерваяСтрока="301" Тогда
			Стр.Статус = "Ошибка, неправильный пароль, либо пользователь не найден";
		ИначеЕсли ПерваяСтрока="302" Тогда
			Стр.Статус = "Ошибка, пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)";
		Иначе
			Стр.Статус = "Ошибка, неизвестная ошибка доставки СМС (" + ПерваяСтрока + ")";
		КонецЕсли;
		Ответ.Закрыть();
	КонецЦикла;
	
	Файл = Новый Файл(ВременныйФайл);
	ИмяВременногоФайла = Файл.Имя;
	КаталогВременногоФайла = Файл.Путь;	
	УдалитьФайлы(КаталогВременногоФайла, ИмяВременногоФайла);
	
	ОбновитьБалансНаСервре();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусДоставки(Команда)
	ОбновитьСтатусДоставкиНаСервере();
КонецПроцедуры

&НаСервере
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	ХранилищеНастроекДанныхФорм.Сохранить("SMS_Настройки", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиФормы()

&НаКлиенте
Процедура ПриЗакрытии()
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("SMS_Логин", Логин);
	СтруктураНастроек.Вставить("SMS_Пароль", Пароль);
	СтруктураНастроек.Вставить("SMS_ИмяОтправителя", Отправитель);
	СтруктураНастроек.Вставить("SMS_Текст", ТекстСМС);
	
	СтруктураНастроек.Вставить("SMS_НомерКолонкиТелефона", Объект.НомерКолонкиТелефона);
	СтруктураНастроек.Вставить("SMS_НомерСИменемАдресата", Объект.НомерСИменемАдресата);
	СтруктураНастроек.Вставить("SMS_НомерПервойСтроки", Объект.НомерПервойСтроки);
	
	СохранитьНастройкиФормы(СтруктураНастроек);
КонецПроцедуры

&НаСервере
// Загружает настройки формы. 
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("SMS_Настройки", "СтруктураНастроек");
	    
	Если СтруктураНастроек <> Неопределено Тогда
		Если СтруктураНастроек.Свойство("SMS_Логин") Тогда
			Логин = СтруктураНастроек.SMS_Логин;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("SMS_Пароль") Тогда
			Пароль = СтруктураНастроек.SMS_Пароль;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("SMS_Текст") Тогда
			ТекстSMS = СтруктураНастроек.SMS_Текст;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("SMS_ИмяОтправителя") Тогда
			Отправитель = СтруктураНастроек.SMS_ИмяОтправителя;
		КонецЕсли;
		
		Попытка	Объект.НомерКолонкиТелефона = СтруктураНастроек.SMS_НомерКолонкиТелефона; Исключение КонецПопытки;
		Попытка	Объект.НомерСИменемАдресата = СтруктураНастроек.SMS_НомерСИменемАдресата; Исключение КонецПопытки;
		Попытка	Объект.НомерПервойСтроки = СтруктураНастроек.SMS_НомерПервойСтроки; Исключение КонецПопытки;
		
	КонецЕсли;	
	
	Если Объект.НомерКолонкиТелефона = 0 Тогда
		Объект.НомерКолонкиТелефона = 2;
	КонецЕсли;
	Если Объект.НомерСИменемАдресата = 0 Тогда
		Объект.НомерСИменемАдресата = 1;
	КонецЕсли;
	Если Объект.НомерПервойСтроки = 0 Тогда
		Объект.НомерПервойСтроки = 1;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗагрузитьНастройкиФормы();
	Если НЕ ПустаяСтрока(Логин) Тогда
		ОбновитьБалансНаСервре();
	КонецЕсли;
	
	ОбработкаОбъект = ОбработкаОбъект();
		
	Объект.ВерсияБСП = ОбработкаОбъект.ПолучитьВерсиюБСП();
	
	Объект.ПараметрыСеансаОбработки	= ОбработкаОбъект.ОбработкаПолучитьПараметрыСеанса(ЭтаФорма);	
	
	Объект.ПутьКФормам = "";
	Если Объект.ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Объект.ПутьКФормам = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".Форма";
	Иначе
		Объект.ПутьКФормам = "Обработка." + ОбработкаОбъект.Метаданные().Имя + ".Форма";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	ЗапуститьПриложение("http://sys1c.sms.ru/?panel=login-forgot");
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ЗапуститьПриложение("http://sys1c.sms.ru/?panel=register");
КонецПроцедуры

&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	ЗапуститьПриложение("http://sys1c.sms.ru/?panel=mass&subpanel=senders");
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ТЗ.Очистить();
КонецПроцедуры

&НаСервере
Функция ОбработкаОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция ЭтоКлиентСервер()
	
	Возврат ОбработкаОбъект().ЭтоКлиентСервер();
	
КонецФункции

&НаКлиенте
Процедура ИзФайлаExcel(Команда)
	
	ИмяФормаЗагрузкиИзExcel = Объект.ПараметрыСеансаОбработки.ИмяФормаЗагрузкиИзExcel;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ФайлExcel", );
	ПараметрыФормы.Вставить("НомерКолонкиТелефона", Объект.НомерКолонкиТелефона);
	ПараметрыФормы.Вставить("НомерСИменемАдресата", Объект.НомерСИменемАдресата);
	ПараметрыФормы.Вставить("НомерПервойСтроки", Объект.НомерПервойСтроки);
	
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ФормаИлиОбработчик", ЭтаФорма);
	
	ФормаЗагрузкиИзExcel = ПолучитьФорму(ИмяФормаЗагрузкиИзExcel, ПараметрыФормы, ЭтаФорма);
	Попытка
		// Стандартно в модальном режиме (8.2/8.3).
		ФормаЗагрузкиИзExcel.НомерКолонкиТелефона = Объект.НомерКолонкиТелефона;
		ФормаЗагрузкиИзExcel.НомерПервойСтроки	  = Объект.НомерПервойСтроки;
		ФормаЗагрузкиИзExcel.НомерСИменемАдресата = Объект.НомерСИменемАдресата;
		Результат = ФормаЗагрузкиИзExcel.ОткрытьМодально();
		ВыполнитьЗагрузкуExcel(Результат, ПараметрыИсточника);
	Исключение
		Попытка
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВыполнитьЗагрузкуExcel"", ЭтотОбъект, ПараметрыИсточника)");
			Выполнить("ФормаЗагрузкиИзExcel.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
			ФормаЗагрузкиИзExcel.НомерКолонкиТелефона = Объект.НомерКолонкиТелефона;
			ФормаЗагрузкиИзExcel.НомерПервойСтроки	  = Объект.НомерПервойСтроки;
			ФормаЗагрузкиИзExcel.НомерСИменемАдресата = Объект.НомерСИменемАдресата;
			ФормаЗагрузкиИзExcel.Открыть();
		Исключение
			ПредупреждениеСообщение(, "НЕ УДАЛОСЬ ОТКРЫТЬ ФОРМУ ЗАГРУЗКИ ИЗ EXCEL.");
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуExcel(Результат, ПараметрыИсточника) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.НомерКолонкиТелефона = Результат.НомерКолонкиТелефона;
		Объект.НомерПервойСтроки	= Результат.НомерПервойСтроки;
		Объект.НомерСИменемАдресата = Результат.НомерСИменемАдресата;
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборXLS", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, , , Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборXLS(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ВыбранноеИмяФайла);
	
	ЗаполнитьПоТаблицеExcel(Адрес, Файл.Расширение);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПоТаблицеExcel(Адрес, Расширение)
	
	ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	ДД = ПолучитьИзВременногоХранилища(Адрес);
	ДД.Записать(ИмяФайла);
	
	НомерКолонкиТелефона	= Объект.НомерКолонкиТелефона;
	НомерСИменемАдресата	= Объект.НомерСИменемАдресата;
	НомерПервойСтроки		= Объект.НомерПервойСтроки;
	
	Попытка	
		Эксель =  Новый COMОбъект("Excel.Application"); 
	Исключение
		Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!"); 
		Возврат;
	КонецПопытки; 
	
	ТЗ.Очистить();
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла); 
	Лист = Книга.WorkSheets(1); 
	КолСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
	Для Ном = НомерПервойСтроки По КолСтрок Цикл 
		Телефон = Лист.Cells(Ном, НомерКолонкиТелефона).Value;
		Если Телефон <> "" И Телефон <> Неопределено Тогда
			НоваяСтрока				= ТЗ.Добавить();
			НоваяСтрока.Телефон		= СтрЗаменить(Телефон, Символы.НПП, "");
			НоваяСтрока.Контрагент	= Лист.Cells(Ном, НомерСИменемАдресата).Value;
			НоваяСтрока.Флаг		= Истина;
			НоваяСтрока.Статус		= "Не отправлено";
		КонецЕсли; 
	КонецЦикла;	
	
	Эксель.Quit();
			
КонецПроцедуры


&НаКлиенте
Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Попытка
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Исключение
		Попытка
			Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
		Исключение
			Сообщить(ТекстПредупрежденияСообщения);
		КонецПопытки;
	КонецПопытки;
		
КонецПроцедуры


&НаКлиенте
Процедура Декорация5Нажатие(Элемент)
	ЗапуститьПриложение("http://softonit.ru/free/5-smssender.html");
КонецПроцедуры
