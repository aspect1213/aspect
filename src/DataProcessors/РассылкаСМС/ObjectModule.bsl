Перем Команда_ОтправитьСМС ЭКСПОРТ;

/////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСОВ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", Неопределено);
	ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'Рассылка СМС Бухгалтерия предприятия 3.0'"));
	ПараметрыРегистрации.Вставить("Версия", "0.2");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'Рассылка СМС-сообщений по телефонам контрагентов используя сервис http://sys1c.sms.ru.'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
					НСтр("ru = 'Отправка СМС'"),
					Команда_ОтправитьСМС,
					"ОткрытиеФормы");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	ПараметрыСеансаОбработки = ОбработкаПолучитьПараметрыСеанса(Неопределено);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

// Интерфейс для запуска логики обработки
//
// Параметры
// ОбъектыНазначения - массив -  ссылоки на объекты информационной базы, для которых требуется
//					вызвать обработку
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
КонецПроцедуры

&НаСервере
Функция ЭтоКлиентСервер() Экспорт
	
	Возврат НЕ ИнформационнаяБазаФайловая();
	
КонецФункции

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

&НаСервере
Функция ФайлСуществуетИДоступен(ПолноеИмяФайла) Экспорт
	Перем Файл;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка: Занят ли файл другим процессом?
	Если НЕ ВРег(Файл.Расширение) = ".DBF" Тогда
		Попытка
			ПереместитьФайл(Файл.ПолноеИмя,Файл.ПолноеИмя);
		Исключение
			Сообщить("Файл не доступен: 
			|" + Файл.ПолноеИмя);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбработкаПолучитьТонкийТолстый()

    ТонкийТолстый = "";
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение ИЗ МассивСоединений Цикл
		Если ТекСоединение.Пользователь.Имя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя Тогда
			Если ((ТекСоединение.ИмяПриложения = "1CV8") 
				ИЛИ (ТекСоединение.ИмяПриложения = "1CV8C")) Тогда		// Режим 1С:Предприятие ТолстыйКлиент или ТонкийКлиент.
				// ~ "ТонкийКлиент"	 = ПредставлениеПриложения("1CV8C")
				// ~ "ТолстыйКлиент" = ПредставлениеПриложения("1CV8")
				ТонкийТолстый = ПредставлениеПриложения(ТекСоединение.ИмяПриложения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТонкийТолстый;

КонецФункции

&НаСервере
Функция ОбработкаПолучитьИмяФормы(ИмяФормы)
	Перем ПолноеИмяФормы;
	
	ПолноеИмяФормы = Неопределено;
	
	Если ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		ПолноеИмяФормы = "ВнешняяОбработка.РассылкаСМСБух30.Форма." + ИмяФормы;
	Иначе
		ПолноеИмяФормы = "Обработка.РассылкаСМСБух30.Форма." + ИмяФормы;
	КонецЕсли;
	
	Возврат ПолноеИмяФормы;
	
КонецФункции


&НаСервере
Функция ОбработкаПолучитьПараметрыСеанса(Форма) Экспорт

	Перем ИспользуемоеИмяФайла;
	
	ИспользуемоеИмяФайла = Неопределено;
	Попытка
		ИспользуемоеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;
	Исключение
		ИспользуемоеИмяФайла = "Обработка конфигурации";
	КонецПопытки;
	
	ПараметрыСеансаОбработки = Новый Структура;
	Попытка
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"		, Строка(МетаДанные.РежимИспользованияМодальности));	// Строка - Для возможности передачи между Сервером и Клиентом.
	Исключение
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"		, "Использовать");	// Платформа 8.2 - использовать.
	КонецПопытки;
	ПараметрыСеансаОбработки.Вставить("ТонкийТолстый"							, ОбработкаПолучитьТонкийТолстый());
	ПараметрыСеансаОбработки.Вставить("ПривилегированныйРежим"					, ПривилегированныйРежим());
	ПараметрыСеансаОбработки.Вставить("СтрокаСоединенияИнформационнойБазы"		, СтрокаСоединенияИнформационнойБазы());
	ПараметрыСеансаОбработки.Вставить("ИмяФайлаОбработки"						, ИспользуемоеИмяФайла);
	ПараметрыСеансаОбработки.Вставить("ВерсияБСП"								, ПолучитьВерсиюБСП());
	ПараметрыСеансаОбработки.Вставить("ТекущийРежимЗапуска"						, ТекущийРежимЗапуска());
	
	ПараметрыСеансаОбработки.Вставить("ИмяФормаЗагрузкиИзExcel"					, ОбработкаПолучитьИмяФормы("ФормаЗагрузкиИзExcel"));
	
	Возврат ПараметрыСеансаОбработки;
	
КонецФункции

// Версия БСП.
&НаСервере
Функция ПолучитьВерсиюБСП() Экспорт
	Перем ВерсияБСП;
	
	Попытка
		Выполнить("ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
	Исключение
		ВерсияБСП = "Х.Х.Х";
	КонецПопытки;
	
	Возврат ВерсияБСП;
	
КонецФункции

// ОТПРАВКА СМС ПО РЕГЛАМЕНТНОМУ ЗАДАНИЮ

// Возвращает хеш по алгоритму MD5 для произвольной строки.
//
// Параметры:
//  Строка - Строка - произвольная строка любой длины
//
// Возвращаемое значение:
//  Строка - хеш, вычисленный из строки
Функция ВычислитьХешСтрокиПоАлгоритмуMD5(Знач Строка) Экспорт
	
	a = ЧислоВБинарныйМассив(1732584193); // 01 23 45 67; (шестнадцатеричное представление, сначала младший байт)
	b = ЧислоВБинарныйМассив(4023233417); // 89 AB CD EF;
	c = ЧислоВБинарныйМассив(2562383102); // FE DC BA 98;
	d = ЧислоВБинарныйМассив(271733878);  // 76 54 32 10;
	
	X = Новый Массив(16); // X - блок данных размером 512 бит, массив из 32-битных слов
	
	// разбиваем строку на блоки по 512 бит
	МассивБлоковИзСтроки = ПолучитьМассивБлоковБайтовИзСтроки(Строка);
	
	// для каждого блока производим расчет
	Для НомерБлока = 0 По МассивБлоковИзСтроки.Количество() - 1 Цикл 
		Блок = МассивБлоковИзСтроки[НомерБлока];
		Для НомерСлова = 0 по 15 Цикл
			Слово = 0;
			Для НомерБайта = 1 По 4 Цикл
				Слово = Слово + Блок[НомерСлова * 4 + НомерБайта - 1] * Pow(256, НомерБайта - 1);
			КонецЦикла;
			X[НомерСлова] = Слово; 
		КонецЦикла;
		
		// в последний блок дописываем длину строки в битах
		Если НомерБлока = МассивБлоковИзСтроки.Количество() - 1 Тогда
			РазмерСтрокиВБитах = СтрДлина(Строка) * 8;
			X[14] = РазмерСтрокиВБитах % Pow(2,32); // сначала младшие 4 байта
			X[15] = Цел(РазмерСтрокиВБитах / Pow(2,32)) % Pow(2,64); // если длина превосходит (2^64 − 1) бит, то старшие биты откидываем
		КонецЕсли;
		РассчитатьБлок(a, b, c, d, X);
	КонецЦикла;
	
	Результат = ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(a))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(b))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(c))
			  + ЧислоВШестнадцатеричномПредставлении(БинарныйМассивВЧисло(d));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивБлоковБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Строка = Строка + Символ(128); // единичный бит + выравнивание нолями до байта
	Пока СтрДлина(Строка) > 0 Цикл
		БлокБайтов = ПолучитьБлокБайтовИзСтроки(Лев(Строка, 64));
		Результат.Добавить(БлокБайтов);
		
		// если последние 8 байт получились не нулевые, то добавляем ещё один нулевой блок
		Если СтрДлина(Строка) > 56 и СтрДлина(Строка) < 64 Тогда
			Результат.Добавить(ПолучитьБлокБайтовИзСтроки(""));
		КонецЕсли;
		
		Строка = Сред(Строка, 65);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПолучитьБлокБайтовИзСтроки(Знач Строка)
	Результат = Новый Массив;
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Результат.Добавить(КодСимвола(Сред(Строка, Позиция, 1)));
	КонецЦикла;
	
	// дополняем блок нолями
	Для Индекс = Позиция По 64 Цикл
		Результат.Добавить(0);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура РассчитатьБлок(a, b, c, d, X)
	aa = СкопироватьМассив(a);
	bb = СкопироватьМассив(b);
	cc = СкопироватьМассив(c);
	dd = СкопироватьМассив(d);
	
	// раунд 1
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 0],  7, 3614090360); // 0xd76aa478 /* 1 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 1], 12, 3905402710); // 0xe8c7b756 /* 2 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 2], 17,  606105819); // 0x242070db /* 3 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 3], 22, 3250441966); // 0xc1bdceee /* 4 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 4],  7, 4118548399); // 0xf57c0faf /* 5 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 5], 12, 1200080426); // 0x4787c62a /* 6 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[ 6], 17, 2821735955); // 0xa8304613 /* 7 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[ 7], 22, 4249261313); // 0xfd469501 /* 8 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[ 8],  7, 1770035416); // 0x698098d8 /* 9 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[ 9], 12, 2336552879); // 0x8b44f7af /* 10 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[10], 17, 4294925233); // 0xffff5bb1 /* 11 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[11], 22, 2304563134); // 0x895cd7be /* 12 */
	ВыполнитьОперациюСФункциейF(a,b,c,d, X[12],  7, 1804603682); // 0x6b901122 /* 13 */
	ВыполнитьОперациюСФункциейF(d,a,b,c, X[13], 12, 4254626195); // 0xfd987193 /* 14 */
	ВыполнитьОперациюСФункциейF(c,d,a,b, X[14], 17, 2792965006); // 0xa679438e /* 15 */
	ВыполнитьОперациюСФункциейF(b,c,d,a, X[15], 22, 1236535329); // 0x49b40821 /* 16 */
	
	// раунд 2
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 1],  5, 4129170786); // 0xf61e2562 /* 17 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 6],  9, 3225465664); // 0xc040b340 /* 18 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[11], 14,  643717713); // 0x265e5a51 /* 19 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 0], 20, 3921069994); // 0xe9b6c7aa /* 20 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 5],  5, 3593408605); // 0xd62f105d /* 21 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[10],  9,   38016083); //  0x2441453 /* 22 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[15], 14, 3634488961); // 0xd8a1e681 /* 23 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 4], 20, 3889429448); // 0xe7d3fbc8 /* 24 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[ 9],  5,  568446438); // 0x21e1cde6 /* 25 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[14],  9, 3275163606); // 0xc33707d6 /* 26 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 3], 14, 4107603335); // 0xf4d50d87 /* 27 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[ 8], 20, 1163531501); // 0x455a14ed /* 28 */
	ВыполнитьОперациюСФункциейG(a,b,c,d, X[13],  5, 2850285829); // 0xa9e3e905 /* 29 */
	ВыполнитьОперациюСФункциейG(d,a,b,c, X[ 2],  9, 4243563512); // 0xfcefa3f8 /* 30 */
	ВыполнитьОперациюСФункциейG(c,d,a,b, X[ 7], 14, 1735328473); // 0x676f02d9 /* 31 */
	ВыполнитьОперациюСФункциейG(b,c,d,a, X[12], 20, 2368359562); // 0x8d2a4c8a /* 32 */
	
	// раунд 3
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 5],  4, 4294588738); // 0xfffa3942 /* 33 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 8], 11, 2272392833); // 0x8771f681 /* 34 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[11], 16, 1839030562); // 0x6d9d6122 /* 35 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[14], 23, 4259657740); // 0xfde5380c /* 36 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 1],  4, 2763975236); // 0xa4beea44 /* 37 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 4], 11, 1272893353); // 0x4bdecfa9 /* 38 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 7], 16, 4139469664); // 0xf6bb4b60 /* 39 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[10], 23, 3200236656); // 0xbebfbc70 /* 40 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[13],  4,  681279174); // 0x289b7ec6 /* 41 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[ 0], 11, 3936430074); // 0xeaa127fa /* 42 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[ 3], 16, 3572445317); // 0xd4ef3085 /* 43 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 6], 23,   76029189); //  0x4881d05 /* 44 */
	ВыполнитьОперациюСФункциейH(a,b,c,d, X[ 9],  4, 3654602809); // 0xd9d4d039 /* 45 */
	ВыполнитьОперациюСФункциейH(d,a,b,c, X[12], 11, 3873151461); // 0xe6db99e5 /* 46 */
	ВыполнитьОперациюСФункциейH(c,d,a,b, X[15], 16,  530742520); // 0x1fa27cf8 /* 47 */
	ВыполнитьОперациюСФункциейH(b,c,d,a, X[ 2], 23, 3299628645); // 0xc4ac5665 /* 48 */
	
	// раунд 4
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 0],  6, 4096336452); // 0xf4292244 /* 49 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 7], 10, 1126891415); // 0x432aff97 /* 50 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[14], 15, 2878612391); // 0xab9423a7 /* 51 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 5], 21, 4237533241); // 0xfc93a039 /* 52 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[12],  6, 1700485571); // 0x655b59c3 /* 53 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[ 3], 10, 2399980690); // 0x8f0ccc92 /* 54 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[10], 15, 4293915773); // 0xffeff47d /* 55 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 1], 21, 2240044497); // 0x85845dd1 /* 56 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 8],  6, 1873313359); // 0x6fa87e4f /* 57 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[15], 10, 4264355552); // 0xfe2ce6e0 /* 58 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 6], 15, 2734768916); // 0xa3014314 /* 59 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[13], 21, 1309151649); // 0x4e0811a1 /* 60 */
	ВыполнитьОперациюСФункциейI(a,b,c,d, X[ 4],  6, 4149444226); // 0xf7537e82 /* 61 */
	ВыполнитьОперациюСФункциейI(d,a,b,c, X[11], 10, 3174756917); // 0xbd3af235 /* 62 */
	ВыполнитьОперациюСФункциейI(c,d,a,b, X[ 2], 15,  718787259); // 0x2ad7d2bb /* 63 */
	ВыполнитьОперациюСФункциейI(b,c,d,a, X[ 9], 21, 3951481745); // 0xeb86d391 /* 64 */
	
	a = БинарнаяСумма(a, aa);
	b = БинарнаяСумма(b, bb);
	c = БинарнаяСумма(c, cc);
	d = БинарнаяСумма(d, dd);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейF(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, c), ПобитовоеИ(ПобитовоеНе(b), d)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейG(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИли(ПобитовоеИ(b, d), ПобитовоеИ(ПобитовоеНе(d), c)), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейH(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИсключающееИли(b, c), d), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперациюСФункциейI(a, b, c, d, X, s, t)
	ВыполнитьОперацию(ПобитовоеИсключающееИли(ПобитовоеИли(ПобитовоеНе(d), b), c), a, b, X, s, t);
КонецПроцедуры

Процедура ВыполнитьОперацию(q, a, b, X, s, t)
	a = БинарнаяСумма(ЦиклическийСдвигВлево(БинарнаяСумма(БинарнаяСумма(a, q), ЧислоВБинарныйМассив((X + t) % Pow(2,32))), s), b);
КонецПроцедуры

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 4)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаСимволов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеИсключающееИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ПобитовоеНе(БинарныйМассив)
	Результат = Новый Массив;
	Для Каждого Элемент Из БинарныйМассив Цикл
		Результат.Добавить(Не Элемент);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ЦиклическийСдвигВлево(БинарныйМассив, КоличествоРазрядов)
	Результат = Новый Массив(БинарныйМассив.Количество());
	Для Разряд = 0 По БинарныйМассив.Количество()-1 Цикл
		Результат[(Разряд + КоличествоРазрядов) % БинарныйМассив.Количество()] = БинарныйМассив[Разряд];
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарнаяСумма(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	ДобавитьКРазряду = Ложь;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] <> БинарныйМассив2[Индекс] <> ДобавитьКРазряду);
		ДобавитьКРазряду = (0 + БинарныйМассив1[Индекс] + БинарныйМассив2[Индекс] + ДобавитьКРазряду) > 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СкопироватьМассив(Массив)
	Результат = Новый Массив;
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Преобразовать строку в UTF-8
Функция ПреобразоватьСтрокуВУТФ8(Стр) Экспорт
    Длина=СтрДлина(Стр);
    Итог="";
    Для Н=1 По Длина Цикл
        Знак=Сред(Стр,Н,1);
        Код=КодСимвола(Знак);
        Если Код<128 Тогда
            Итог=Итог+Знак;
        Иначе
            Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
                Итог=Итог+Символ(208)+Символ(144+Код-КодСимвола("А"));
            ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
                Итог=Итог+Символ(209)+Символ(128+Код-КодСимвола("р"));
            ИначеЕсли (Знак="ё") Тогда
                Итог=Итог+Символ(209)+Символ(145);
            ИначеЕсли (Знак="Ё") Тогда
                Итог=Итог+Символ(208)+Символ(129);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    Возврат Итог;
КонецФункции

Процедура ОтправитьСМСНаСервере(ТекстСМС, Логин, Пароль, Получатель, Отправитель = "") Экспорт
	ВременныйФайл = ПолучитьИмяВременногоФайла(".txt");
	
	//Для каждого Стр Из ТЗ Цикл
	//	Если Стр.Флаг Тогда
			//Получатель = Стр.Телефон;
			
			// Получаем токен
			Отправка=Новый HTTPСоединение("sms.ru",,,,);
			Отправка.Получить("http://sms.ru/auth/get_token", ВременныйФайл);
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			Токен = Ответ.ПрочитатьСтроку();
			Ответ.Закрыть();
			
			МД5 = НРег(ВычислитьХешСтрокиПоАлгоритмуMD5(ПреобразоватьСтрокуВУТФ8(Пароль) + Токен));
					
			Отправка=Новый HTTPСоединение("sms.ru",,,,);		
			Отправка.Получить(
				"http://sms.ru/sms/send?to=" + Строка(Получатель) + "&text=" + Строка(ТекстСМС) + ?(ПустаяСтрока(Отправитель), "", "&from=" + Отправитель) + "&login=" + Логин + "&partner_id=12737" + "&token=" + Токен + "&sig=" + МД5,
				ВременныйФайл
			);		
			
			Ответ = Новый ЧтениеТекста(ВременныйФайл);
			ПерваяСтрока = Ответ.ПрочитатьСтроку();
			//Если ПерваяСтрока="100" Тогда
			//	Стр.ИДСообщения = Ответ.ПрочитатьСтроку();
			//	Стр.Статус = "Отправка";
			//ИначеЕсли ПерваяСтрока="200" Тогда			
			//	Стр.Статус = "Неправильный api_id (СМС Ключ)";
			//ИначеЕсли ПерваяСтрока="201" Тогда
			//	Стр.Статус = "Не хватает средств на лицевом счету";
			//ИначеЕсли ПерваяСтрока="202" Тогда
			//	Стр.Статус = "Неправильно указан получатель";
			//ИначеЕсли ПерваяСтрока="203" Тогда
			//	Стр.Статус = "Нет текста сообщения";
			//ИначеЕсли ПерваяСтрока="204" Тогда
			//	Стр.Статус = "Имя отправителя не согласовано с администрацией (sms.ru)";
			//ИначеЕсли ПерваяСтрока="205" Тогда
			//	Стр.Статус = "Сообщение слишком длинное (превышает 5 СМС)";
			//ИначеЕсли ПерваяСтрока="206" Тогда
			//	Стр.Статус = "Превышен дневной лимит на отправку сообщений";
			//ИначеЕсли ПерваяСтрока="207" Тогда
			//	Стр.Статус = "На этот номер нельзя отправлять сообщения";
			//ИначеЕсли ПерваяСтрока="208" Тогда
			//	Стр.Статус = "Параметр time указан неправильно";
			//ИначеЕсли ПерваяСтрока="209" Тогда
			//	Стр.Статус = "Вы добавили этот номер в стоп-лист";
			//ИначеЕсли ПерваяСтрока="210" Тогда
			//	Стр.Статус = "Используется GET, где необходимо использовать POST";
			//ИначеЕсли ПерваяСтрока="211" Тогда
			//	Стр.Статус = "Метод не найден";
			//ИначеЕсли ПерваяСтрока="220" Тогда
			//	Стр.Статус = "Сервис временно недоступен, попробуйте чуть позже.";
			//ИначеЕсли ПерваяСтрока="230" Тогда
			//	Стр.Статус = "Сообщение не принято к отправке, так как на один номер в день нельзя отправлять более 250 сообщений.";
			//ИначеЕсли ПерваяСтрока="300" Тогда
			//	Стр.Статус = "Неправильный token (возможно истек срок действия, либо ваш IP изменился)";
			//ИначеЕсли ПерваяСтрока="301" Тогда
			//	Стр.Статус = "Неправильный пароль, либо пользователь не найден";
			//ИначеЕсли ПерваяСтрока="302" Тогда
			//	Стр.Статус = "Пользователь авторизован, но аккаунт не подтвержден (пользователь не ввел код, присланный в регистрационной смс)";
			//Иначе
			//	Стр.Статус = "Неизвестная ошибка отправки СМС (" + ПерваяСтрока + ")";
			//КонецЕсли;
			Ответ.Закрыть();
	//	КонецЕсли;
	//КонецЦикла;
	
	Файл = Новый Файл(ВременныйФайл);
	ИмяВременногоФайла = Файл.Имя;
	КаталогВременногоФайла = Файл.Путь;	
	УдалитьФайлы(КаталогВременногоФайла, ИмяВременногоФайла);

КонецПроцедуры

Команда_ОтправитьСМС = "ОтправитьСМС";